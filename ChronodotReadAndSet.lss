
C:\Users\CDELLI~1\AppData\Local\Temp\build-dcffc87d-9233-408a-ba7e-1359e946e452/ChronodotReadAndSet.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000074  00800100  00001a00  00001a94  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001a00  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000018a  00800174  00800174  00001b08  2**0
                  ALLOC
  3 .debug_aranges 00000738  00000000  00000000  00001b08  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00001238  00000000  00000000  00002240  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00009280  00000000  00000000  00003478  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000018cb  00000000  00000000  0000c6f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000045c7  00000000  00000000  0000dfc3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000d10  00000000  00000000  0001258c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000210b  00000000  00000000  0001329c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000041cc  00000000  00000000  000153a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000710  00000000  00000000  00019573  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
uint8_t dec2bcd(uint8_t num) {
    return ((num / 10) << 4) + (num % 10);
}


uint8_t bcd2dec(uint8_t num) {
       0:	0c 94 99 00 	jmp	0x132	; 0x132 <__ctors_end>
  // set address of targeted slave
  txAddress = address;
  // reset tx buffer iterator vars
  txBufferIndex = 0;
  txBufferLength = 0;
}
       4:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
 */
void twi_setAddress(uint8_t address)
{
  // set twi slave address (skip over TWGCE bit)
  TWAR = address << 1;
}
       8:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
	timer0_millis = m;
	timer0_overflow_count++;
}

unsigned long millis()
{
       c:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
		uint8_t oldSREG = SREG;
                cli();
		*reg |= bit;
		SREG = oldSREG;
	}
}
      10:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
      14:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
  size_t n = print(ifsh);
  n += println();
  return n;
}

size_t Print::print(const Printable& x)
      18:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      1c:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      20:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      24:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      28:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      2c:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      30:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      34:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      38:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      3c:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      40:	0c 94 89 07 	jmp	0xf12	; 0xf12 <__vector_16>
      44:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      48:	0c 94 0d 09 	jmp	0x121a	; 0x121a <__vector_18>
      4c:	0c 94 5b 09 	jmp	0x12b6	; 0x12b6 <__vector_19>
      50:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      54:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      58:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      5c:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      60:	0c 94 da 05 	jmp	0xbb4	; 0xbb4 <__vector_24>
      64:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>

00000068 <_ZZ8sendTimehE3__c_2>:
      68:	20 45 6e 74 65 72 20 6e 65 77 20 64 61 74 65 20      Enter new date 
      78:	61 6e 64 20 74 69 6d 65 20 61 73 20 27 54 59 59     and time as 'TYY
      88:	59 59 4d 4d 44 44 57 68 68 6d 6d 73 73 27 20 77     YYMMDDWhhmmss' w
      98:	68 65 72 65 20 57 3d 31 20 69 73 20 53 75 6e 64     here W=1 is Sund
      a8:	61 79 2c 20 57 3d 32 20 69 73 20 4d 6f 6e 64 61     ay, W=2 is Monda
      b8:	79 2c 20 65 74 63 2e 00                             y, etc..

000000c0 <_ZZ8sendTimehE3__c_1>:
      c0:	7c 20 20 30 20 00                                   |  0 .

000000c6 <_ZZ8sendTimehE3__c_0>:
      c6:	20 7c 20 31 20 00                                    | 1 .

000000cc <_ZZ8sendTimehE3__c>:
      cc:	2d 2d 20 20 20 00                                   --   .

000000d2 <port_to_mode_PGM>:
      d2:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000dc <port_to_output_PGM>:
      dc:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000e6 <port_to_input_PGM>:
      e6:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000000f0 <digital_pin_to_port_PGM>:
      f0:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     100:	03 03 03 03                                         ....

00000104 <digital_pin_to_bit_mask_PGM>:
     104:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     114:	04 08 10 20                                         ... 

00000118 <digital_pin_to_timer_PGM>:
     118:	00 00 00 07 00 02 01 00 00 03 04 06 00 00 00 00     ................
     128:	00 00 00 00                                         ....

0000012c <__ctors_start>:
     12c:	c3 00       	.word	0x00c3	; ????
     12e:	76 04       	cpc	r7, r6
     130:	c7 0a       	sbc	r12, r23

00000132 <__ctors_end>:
     132:	11 24       	eor	r1, r1
     134:	1f be       	out	0x3f, r1	; 63
     136:	cf ef       	ldi	r28, 0xFF	; 255
     138:	d8 e0       	ldi	r29, 0x08	; 8
     13a:	de bf       	out	0x3e, r29	; 62
     13c:	cd bf       	out	0x3d, r28	; 61

0000013e <__do_copy_data>:
     13e:	11 e0       	ldi	r17, 0x01	; 1
     140:	a0 e0       	ldi	r26, 0x00	; 0
     142:	b1 e0       	ldi	r27, 0x01	; 1
     144:	e0 e0       	ldi	r30, 0x00	; 0
     146:	fa e1       	ldi	r31, 0x1A	; 26
     148:	02 c0       	rjmp	.+4      	; 0x14e <.do_copy_data_start>

0000014a <.do_copy_data_loop>:
     14a:	05 90       	lpm	r0, Z+
     14c:	0d 92       	st	X+, r0

0000014e <.do_copy_data_start>:
     14e:	a4 37       	cpi	r26, 0x74	; 116
     150:	b1 07       	cpc	r27, r17
     152:	d9 f7       	brne	.-10     	; 0x14a <.do_copy_data_loop>

00000154 <__do_clear_bss>:
     154:	12 e0       	ldi	r17, 0x02	; 2
     156:	a4 e7       	ldi	r26, 0x74	; 116
     158:	b1 e0       	ldi	r27, 0x01	; 1
     15a:	01 c0       	rjmp	.+2      	; 0x15e <.do_clear_bss_start>

0000015c <.do_clear_bss_loop>:
     15c:	1d 92       	st	X+, r1

0000015e <.do_clear_bss_start>:
     15e:	ae 3f       	cpi	r26, 0xFE	; 254
     160:	b1 07       	cpc	r27, r17
     162:	e1 f7       	brne	.-8      	; 0x15c <.do_clear_bss_loop>

00000164 <__do_global_ctors>:
     164:	11 e0       	ldi	r17, 0x01	; 1
     166:	c2 e3       	ldi	r28, 0x32	; 50
     168:	d1 e0       	ldi	r29, 0x01	; 1
     16a:	04 c0       	rjmp	.+8      	; 0x174 <.do_global_ctors_start>

0000016c <.do_global_ctors_loop>:
     16c:	22 97       	sbiw	r28, 0x02	; 2
     16e:	fe 01       	movw	r30, r28
     170:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <__tablejump__>

00000174 <.do_global_ctors_start>:
     174:	cc 32       	cpi	r28, 0x2C	; 44
     176:	d1 07       	cpc	r29, r17
     178:	c9 f7       	brne	.-14     	; 0x16c <.do_global_ctors_loop>
     17a:	0e 94 1d 0b 	call	0x163a	; 0x163a <main>
     17e:	0c 94 fe 0c 	jmp	0x19fc	; 0x19fc <_exit>

00000182 <__bad_interrupt>:
     182:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000186 <_GLOBAL__I_chronodot>:
#include <Wire.h>
#include <Chronodot.h>


// create global chronodot instance
Chronodot chronodot = Chronodot();
     186:	84 e7       	ldi	r24, 0x74	; 116
     188:	91 e0       	ldi	r25, 0x01	; 1
     18a:	0e 94 19 04 	call	0x832	; 0x832 <_ZN9ChronodotC1Ev>
      d10 = Serial.read() - '0';
      d01 = Serial.read() - '0';
      tE.seconds = (d10 * 10) + d01;
    }
  }
}
     18e:	08 95       	ret

00000190 <_Z18processSyncMessageR16timeDateElements>:


// get the date and time from serial in the following format
// TYYYYMMDDWhhmmss
// where W is the day of the week with 1=Sunday, 2=Monday, etc.
void processSyncMessage(timeDateElements &tE)
     190:	8f 92       	push	r8
     192:	9f 92       	push	r9
     194:	af 92       	push	r10
     196:	bf 92       	push	r11
     198:	cf 92       	push	r12
     19a:	df 92       	push	r13
     19c:	ef 92       	push	r14
     19e:	ff 92       	push	r15
     1a0:	0f 93       	push	r16
     1a2:	1f 93       	push	r17
     1a4:	cf 93       	push	r28
     1a6:	df 93       	push	r29
     1a8:	ec 01       	movw	r28, r24
{
  tE.seconds = 0;
     1aa:	18 82       	st	Y, r1
  tE.minutes = 0;
     1ac:	19 82       	std	Y+1, r1	; 0x01
  tE.hours   = 0;
     1ae:	1a 82       	std	Y+2, r1	; 0x02
  tE.weekDay = 0;
     1b0:	1b 82       	std	Y+3, r1	; 0x03
  tE.day     = 0;
     1b2:	1c 82       	std	Y+4, r1	; 0x04
  tE.month   = 0;
     1b4:	1d 82       	std	Y+5, r1	; 0x05
  tE.year    = 0;
     1b6:	1f 82       	std	Y+7, r1	; 0x07
     1b8:	1e 82       	std	Y+6, r1	; 0x06
      
      d1000 = Serial.read() - '0';
      d100 = Serial.read() - '0';
      d10 = Serial.read() - '0';
      d01 = Serial.read() - '0';
      tE.year = (d1000 * 1000) + (d100 * 100) + (d10 * 10) + d01;
     1ba:	f8 ee       	ldi	r31, 0xE8	; 232
     1bc:	8f 2e       	mov	r8, r31
     1be:	f3 e0       	ldi	r31, 0x03	; 3
     1c0:	9f 2e       	mov	r9, r31
     1c2:	e4 e6       	ldi	r30, 0x64	; 100
     1c4:	ae 2e       	mov	r10, r30
     1c6:	b1 2c       	mov	r11, r1
     1c8:	c3 c0       	rjmp	.+390    	; 0x350 <_Z18processSyncMessageR16timeDateElements+0x1c0>
  tE.month   = 0;
  tE.year    = 0;
  
  while (Serial.available() >= 16)
  {
    char c = Serial.read();
     1ca:	8c ed       	ldi	r24, 0xDC	; 220
     1cc:	92 e0       	ldi	r25, 0x02	; 2
     1ce:	0e 94 4e 0a 	call	0x149c	; 0x149c <_ZN14HardwareSerial4readEv>
    if (c == 'T')
     1d2:	84 35       	cpi	r24, 0x54	; 84
     1d4:	09 f0       	breq	.+2      	; 0x1d8 <_Z18processSyncMessageR16timeDateElements+0x48>
     1d6:	bc c0       	rjmp	.+376    	; 0x350 <_Z18processSyncMessageR16timeDateElements+0x1c0>
    {
      int d1000, d100, d10, d01;
      
      d1000 = Serial.read() - '0';
     1d8:	8c ed       	ldi	r24, 0xDC	; 220
     1da:	92 e0       	ldi	r25, 0x02	; 2
     1dc:	0e 94 4e 0a 	call	0x149c	; 0x149c <_ZN14HardwareSerial4readEv>
     1e0:	7c 01       	movw	r14, r24
      d100 = Serial.read() - '0';
     1e2:	8c ed       	ldi	r24, 0xDC	; 220
     1e4:	92 e0       	ldi	r25, 0x02	; 2
     1e6:	0e 94 4e 0a 	call	0x149c	; 0x149c <_ZN14HardwareSerial4readEv>
     1ea:	6c 01       	movw	r12, r24
      d10 = Serial.read() - '0';
     1ec:	8c ed       	ldi	r24, 0xDC	; 220
     1ee:	92 e0       	ldi	r25, 0x02	; 2
     1f0:	0e 94 4e 0a 	call	0x149c	; 0x149c <_ZN14HardwareSerial4readEv>
     1f4:	8c 01       	movw	r16, r24
      d01 = Serial.read() - '0';
     1f6:	8c ed       	ldi	r24, 0xDC	; 220
     1f8:	92 e0       	ldi	r25, 0x02	; 2
     1fa:	0e 94 4e 0a 	call	0x149c	; 0x149c <_ZN14HardwareSerial4readEv>
      tE.year = (d1000 * 1000) + (d100 * 100) + (d10 * 10) + d01;
     1fe:	c0 97       	sbiw	r24, 0x30	; 48
     200:	20 ed       	ldi	r18, 0xD0	; 208
     202:	3f ef       	ldi	r19, 0xFF	; 255
     204:	e2 0e       	add	r14, r18
     206:	f3 1e       	adc	r15, r19
     208:	e8 9c       	mul	r14, r8
     20a:	90 01       	movw	r18, r0
     20c:	e9 9c       	mul	r14, r9
     20e:	30 0d       	add	r19, r0
     210:	f8 9c       	mul	r15, r8
     212:	30 0d       	add	r19, r0
     214:	11 24       	eor	r1, r1
     216:	82 0f       	add	r24, r18
     218:	93 1f       	adc	r25, r19
     21a:	20 ed       	ldi	r18, 0xD0	; 208
     21c:	3f ef       	ldi	r19, 0xFF	; 255
     21e:	c2 0e       	add	r12, r18
     220:	d3 1e       	adc	r13, r19
     222:	ca 9c       	mul	r12, r10
     224:	90 01       	movw	r18, r0
     226:	cb 9c       	mul	r12, r11
     228:	30 0d       	add	r19, r0
     22a:	da 9c       	mul	r13, r10
     22c:	30 0d       	add	r19, r0
     22e:	11 24       	eor	r1, r1
     230:	82 0f       	add	r24, r18
     232:	93 1f       	adc	r25, r19
     234:	00 53       	subi	r16, 0x30	; 48
     236:	10 40       	sbci	r17, 0x00	; 0
     238:	98 01       	movw	r18, r16
     23a:	73 e0       	ldi	r23, 0x03	; 3
     23c:	22 0f       	add	r18, r18
     23e:	33 1f       	adc	r19, r19
     240:	7a 95       	dec	r23
     242:	e1 f7       	brne	.-8      	; 0x23c <_Z18processSyncMessageR16timeDateElements+0xac>
     244:	00 0f       	add	r16, r16
     246:	11 1f       	adc	r17, r17
     248:	20 0f       	add	r18, r16
     24a:	31 1f       	adc	r19, r17
     24c:	82 0f       	add	r24, r18
     24e:	93 1f       	adc	r25, r19
     250:	9f 83       	std	Y+7, r25	; 0x07
     252:	8e 83       	std	Y+6, r24	; 0x06
      
      d10 = Serial.read() - '0';
     254:	8c ed       	ldi	r24, 0xDC	; 220
     256:	92 e0       	ldi	r25, 0x02	; 2
     258:	0e 94 4e 0a 	call	0x149c	; 0x149c <_ZN14HardwareSerial4readEv>
     25c:	8c 01       	movw	r16, r24
      d01 = Serial.read() - '0';
     25e:	8c ed       	ldi	r24, 0xDC	; 220
     260:	92 e0       	ldi	r25, 0x02	; 2
     262:	0e 94 4e 0a 	call	0x149c	; 0x149c <_ZN14HardwareSerial4readEv>
      tE.month = (d10 * 10) + d01;
     266:	00 53       	subi	r16, 0x30	; 48
     268:	10 40       	sbci	r17, 0x00	; 0
     26a:	98 01       	movw	r18, r16
     26c:	53 e0       	ldi	r21, 0x03	; 3
     26e:	22 0f       	add	r18, r18
     270:	33 1f       	adc	r19, r19
     272:	5a 95       	dec	r21
     274:	e1 f7       	brne	.-8      	; 0x26e <_Z18processSyncMessageR16timeDateElements+0xde>
     276:	00 0f       	add	r16, r16
     278:	11 1f       	adc	r17, r17
     27a:	20 0f       	add	r18, r16
     27c:	31 1f       	adc	r19, r17
     27e:	c0 97       	sbiw	r24, 0x30	; 48
     280:	28 0f       	add	r18, r24
     282:	2d 83       	std	Y+5, r18	; 0x05
      
      d10 = Serial.read() - '0';
     284:	8c ed       	ldi	r24, 0xDC	; 220
     286:	92 e0       	ldi	r25, 0x02	; 2
     288:	0e 94 4e 0a 	call	0x149c	; 0x149c <_ZN14HardwareSerial4readEv>
     28c:	8c 01       	movw	r16, r24
      d01 = Serial.read() - '0';
     28e:	8c ed       	ldi	r24, 0xDC	; 220
     290:	92 e0       	ldi	r25, 0x02	; 2
     292:	0e 94 4e 0a 	call	0x149c	; 0x149c <_ZN14HardwareSerial4readEv>
      tE.day = (d10 * 10) + d01;
     296:	00 53       	subi	r16, 0x30	; 48
     298:	10 40       	sbci	r17, 0x00	; 0
     29a:	98 01       	movw	r18, r16
     29c:	b3 e0       	ldi	r27, 0x03	; 3
     29e:	22 0f       	add	r18, r18
     2a0:	33 1f       	adc	r19, r19
     2a2:	ba 95       	dec	r27
     2a4:	e1 f7       	brne	.-8      	; 0x29e <_Z18processSyncMessageR16timeDateElements+0x10e>
     2a6:	00 0f       	add	r16, r16
     2a8:	11 1f       	adc	r17, r17
     2aa:	20 0f       	add	r18, r16
     2ac:	31 1f       	adc	r19, r17
     2ae:	c0 97       	sbiw	r24, 0x30	; 48
     2b0:	28 0f       	add	r18, r24
     2b2:	2c 83       	std	Y+4, r18	; 0x04
      
      tE.weekDay = Serial.read() -'0';
     2b4:	8c ed       	ldi	r24, 0xDC	; 220
     2b6:	92 e0       	ldi	r25, 0x02	; 2
     2b8:	0e 94 4e 0a 	call	0x149c	; 0x149c <_ZN14HardwareSerial4readEv>
     2bc:	80 53       	subi	r24, 0x30	; 48
     2be:	8b 83       	std	Y+3, r24	; 0x03
      
      d10 = Serial.read() - '0';
     2c0:	8c ed       	ldi	r24, 0xDC	; 220
     2c2:	92 e0       	ldi	r25, 0x02	; 2
     2c4:	0e 94 4e 0a 	call	0x149c	; 0x149c <_ZN14HardwareSerial4readEv>
     2c8:	8c 01       	movw	r16, r24
      d01 = Serial.read() - '0';
     2ca:	8c ed       	ldi	r24, 0xDC	; 220
     2cc:	92 e0       	ldi	r25, 0x02	; 2
     2ce:	0e 94 4e 0a 	call	0x149c	; 0x149c <_ZN14HardwareSerial4readEv>
      tE.hours = (d10 * 10) + d01;
     2d2:	00 53       	subi	r16, 0x30	; 48
     2d4:	10 40       	sbci	r17, 0x00	; 0
     2d6:	98 01       	movw	r18, r16
     2d8:	f3 e0       	ldi	r31, 0x03	; 3
     2da:	22 0f       	add	r18, r18
     2dc:	33 1f       	adc	r19, r19
     2de:	fa 95       	dec	r31
     2e0:	e1 f7       	brne	.-8      	; 0x2da <_Z18processSyncMessageR16timeDateElements+0x14a>
     2e2:	00 0f       	add	r16, r16
     2e4:	11 1f       	adc	r17, r17
     2e6:	20 0f       	add	r18, r16
     2e8:	31 1f       	adc	r19, r17
     2ea:	c0 97       	sbiw	r24, 0x30	; 48
     2ec:	28 0f       	add	r18, r24
     2ee:	2a 83       	std	Y+2, r18	; 0x02
      
      d10 = Serial.read() - '0';
     2f0:	8c ed       	ldi	r24, 0xDC	; 220
     2f2:	92 e0       	ldi	r25, 0x02	; 2
     2f4:	0e 94 4e 0a 	call	0x149c	; 0x149c <_ZN14HardwareSerial4readEv>
     2f8:	8c 01       	movw	r16, r24
      d01 = Serial.read() - '0';
     2fa:	8c ed       	ldi	r24, 0xDC	; 220
     2fc:	92 e0       	ldi	r25, 0x02	; 2
     2fe:	0e 94 4e 0a 	call	0x149c	; 0x149c <_ZN14HardwareSerial4readEv>
      tE.minutes = (d10 * 10) + d01;
     302:	00 53       	subi	r16, 0x30	; 48
     304:	10 40       	sbci	r17, 0x00	; 0
     306:	98 01       	movw	r18, r16
     308:	73 e0       	ldi	r23, 0x03	; 3
     30a:	22 0f       	add	r18, r18
     30c:	33 1f       	adc	r19, r19
     30e:	7a 95       	dec	r23
     310:	e1 f7       	brne	.-8      	; 0x30a <_Z18processSyncMessageR16timeDateElements+0x17a>
     312:	00 0f       	add	r16, r16
     314:	11 1f       	adc	r17, r17
     316:	20 0f       	add	r18, r16
     318:	31 1f       	adc	r19, r17
     31a:	c0 97       	sbiw	r24, 0x30	; 48
     31c:	28 0f       	add	r18, r24
     31e:	29 83       	std	Y+1, r18	; 0x01
      
      d10 = Serial.read() - '0';
     320:	8c ed       	ldi	r24, 0xDC	; 220
     322:	92 e0       	ldi	r25, 0x02	; 2
     324:	0e 94 4e 0a 	call	0x149c	; 0x149c <_ZN14HardwareSerial4readEv>
     328:	8c 01       	movw	r16, r24
      d01 = Serial.read() - '0';
     32a:	8c ed       	ldi	r24, 0xDC	; 220
     32c:	92 e0       	ldi	r25, 0x02	; 2
     32e:	0e 94 4e 0a 	call	0x149c	; 0x149c <_ZN14HardwareSerial4readEv>
      tE.seconds = (d10 * 10) + d01;
     332:	00 53       	subi	r16, 0x30	; 48
     334:	10 40       	sbci	r17, 0x00	; 0
     336:	98 01       	movw	r18, r16
     338:	53 e0       	ldi	r21, 0x03	; 3
     33a:	22 0f       	add	r18, r18
     33c:	33 1f       	adc	r19, r19
     33e:	5a 95       	dec	r21
     340:	e1 f7       	brne	.-8      	; 0x33a <_Z18processSyncMessageR16timeDateElements+0x1aa>
     342:	00 0f       	add	r16, r16
     344:	11 1f       	adc	r17, r17
     346:	20 0f       	add	r18, r16
     348:	31 1f       	adc	r19, r17
     34a:	c0 97       	sbiw	r24, 0x30	; 48
     34c:	28 0f       	add	r18, r24
     34e:	28 83       	st	Y, r18
  tE.weekDay = 0;
  tE.day     = 0;
  tE.month   = 0;
  tE.year    = 0;
  
  while (Serial.available() >= 16)
     350:	8c ed       	ldi	r24, 0xDC	; 220
     352:	92 e0       	ldi	r25, 0x02	; 2
     354:	0e 94 1d 0a 	call	0x143a	; 0x143a <_ZN14HardwareSerial9availableEv>
     358:	40 97       	sbiw	r24, 0x10	; 16
     35a:	0c f0       	brlt	.+2      	; 0x35e <_Z18processSyncMessageR16timeDateElements+0x1ce>
     35c:	36 cf       	rjmp	.-404    	; 0x1ca <_Z18processSyncMessageR16timeDateElements+0x3a>
      d10 = Serial.read() - '0';
      d01 = Serial.read() - '0';
      tE.seconds = (d10 * 10) + d01;
    }
  }
}
     35e:	df 91       	pop	r29
     360:	cf 91       	pop	r28
     362:	1f 91       	pop	r17
     364:	0f 91       	pop	r16
     366:	ff 90       	pop	r15
     368:	ef 90       	pop	r14
     36a:	df 90       	pop	r13
     36c:	cf 90       	pop	r12
     36e:	bf 90       	pop	r11
     370:	af 90       	pop	r10
     372:	9f 90       	pop	r9
     374:	8f 90       	pop	r8
     376:	08 95       	ret

00000378 <_Z11printPaddedi>:
  
  Serial.println();
}


void printPadded(int num)
     378:	cf 93       	push	r28
     37a:	df 93       	push	r29
     37c:	ec 01       	movw	r28, r24
{
  if(num < 10)
     37e:	8a 30       	cpi	r24, 0x0A	; 10
     380:	91 05       	cpc	r25, r1
     382:	2c f4       	brge	.+10     	; 0x38e <_Z11printPaddedi+0x16>
  {
    Serial.print('0');
     384:	8c ed       	ldi	r24, 0xDC	; 220
     386:	92 e0       	ldi	r25, 0x02	; 2
     388:	60 e3       	ldi	r22, 0x30	; 48
     38a:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <_ZN5Print5printEc>
  }
  Serial.print(num);
     38e:	8c ed       	ldi	r24, 0xDC	; 220
     390:	92 e0       	ldi	r25, 0x02	; 2
     392:	be 01       	movw	r22, r28
     394:	4a e0       	ldi	r20, 0x0A	; 10
     396:	50 e0       	ldi	r21, 0x00	; 0
     398:	0e 94 81 0c 	call	0x1902	; 0x1902 <_ZN5Print5printEii>
}
     39c:	df 91       	pop	r29
     39e:	cf 91       	pop	r28
     3a0:	08 95       	ret

000003a2 <_Z8sendTimeh>:
  lastSQW = sendTime(lastSQW);
  delay(100);
}


byte sendTime(byte last)
     3a2:	0f 93       	push	r16
     3a4:	1f 93       	push	r17
     3a6:	08 2f       	mov	r16, r24
{
  byte current = digitalRead(SQWpin);
     3a8:	85 e0       	ldi	r24, 0x05	; 5
     3aa:	0e 94 b9 08 	call	0x1172	; 0x1172 <digitalRead>
     3ae:	18 2f       	mov	r17, r24
  boolean transition = false;
  chronodot.readTimeDate();
     3b0:	84 e7       	ldi	r24, 0x74	; 116
     3b2:	91 e0       	ldi	r25, 0x01	; 1
     3b4:	0e 94 4a 03 	call	0x694	; 0x694 <_ZN9Chronodot12readTimeDateEv>
  
  if (last != current)
     3b8:	01 17       	cp	r16, r17
     3ba:	41 f0       	breq	.+16     	; 0x3cc <_Z8sendTimeh+0x2a>
  {
    transition = true;
    Serial.print(F("--   "));
     3bc:	8c ed       	ldi	r24, 0xDC	; 220
     3be:	92 e0       	ldi	r25, 0x02	; 2
     3c0:	6c ec       	ldi	r22, 0xCC	; 204
     3c2:	70 e0       	ldi	r23, 0x00	; 0
     3c4:	0e 94 56 0b 	call	0x16ac	; 0x16ac <_ZN5Print5printEPK19__FlashStringHelper>
     3c8:	11 e0       	ldi	r17, 0x01	; 1
     3ca:	0e c0       	rjmp	.+28     	; 0x3e8 <_Z8sendTimeh+0x46>
  }
  else
  {
    if (current)
     3cc:	00 23       	and	r16, r16
     3ce:	29 f0       	breq	.+10     	; 0x3da <_Z8sendTimeh+0x38>
    {
      Serial.print(F(" | 1 "));
     3d0:	8c ed       	ldi	r24, 0xDC	; 220
     3d2:	92 e0       	ldi	r25, 0x02	; 2
     3d4:	66 ec       	ldi	r22, 0xC6	; 198
     3d6:	70 e0       	ldi	r23, 0x00	; 0
     3d8:	04 c0       	rjmp	.+8      	; 0x3e2 <_Z8sendTimeh+0x40>
    }
    else
    {
      Serial.print(F("|  0 "));
     3da:	8c ed       	ldi	r24, 0xDC	; 220
     3dc:	92 e0       	ldi	r25, 0x02	; 2
     3de:	60 ec       	ldi	r22, 0xC0	; 192
     3e0:	70 e0       	ldi	r23, 0x00	; 0
     3e2:	0e 94 56 0b 	call	0x16ac	; 0x16ac <_ZN5Print5printEPK19__FlashStringHelper>
     3e6:	10 e0       	ldi	r17, 0x00	; 0
    }
  }
  
  Serial.print(chronodot.timeDate.year);
     3e8:	60 91 82 01 	lds	r22, 0x0182
     3ec:	70 91 83 01 	lds	r23, 0x0183
     3f0:	8c ed       	ldi	r24, 0xDC	; 220
     3f2:	92 e0       	ldi	r25, 0x02	; 2
     3f4:	4a e0       	ldi	r20, 0x0A	; 10
     3f6:	50 e0       	ldi	r21, 0x00	; 0
     3f8:	0e 94 30 0c 	call	0x1860	; 0x1860 <_ZN5Print5printEji>
  Serial.print('-');
     3fc:	8c ed       	ldi	r24, 0xDC	; 220
     3fe:	92 e0       	ldi	r25, 0x02	; 2
     400:	6d e2       	ldi	r22, 0x2D	; 45
     402:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <_ZN5Print5printEc>
  printPadded(chronodot.timeDate.month);
     406:	80 91 81 01 	lds	r24, 0x0181
     40a:	90 e0       	ldi	r25, 0x00	; 0
     40c:	0e 94 bc 01 	call	0x378	; 0x378 <_Z11printPaddedi>
  Serial.print('-');
     410:	8c ed       	ldi	r24, 0xDC	; 220
     412:	92 e0       	ldi	r25, 0x02	; 2
     414:	6d e2       	ldi	r22, 0x2D	; 45
     416:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <_ZN5Print5printEc>
  printPadded(chronodot.timeDate.day);
     41a:	80 91 80 01 	lds	r24, 0x0180
     41e:	90 e0       	ldi	r25, 0x00	; 0
     420:	0e 94 bc 01 	call	0x378	; 0x378 <_Z11printPaddedi>
  Serial.print(' ');
     424:	8c ed       	ldi	r24, 0xDC	; 220
     426:	92 e0       	ldi	r25, 0x02	; 2
     428:	60 e2       	ldi	r22, 0x20	; 32
     42a:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <_ZN5Print5printEc>
  Serial.print(weekDayName[chronodot.timeDate.weekDay - 1]);
     42e:	e0 91 7f 01 	lds	r30, 0x017F
     432:	f0 e0       	ldi	r31, 0x00	; 0
     434:	ee 0f       	add	r30, r30
     436:	ff 1f       	adc	r31, r31
     438:	ec 5b       	subi	r30, 0xBC	; 188
     43a:	fe 4f       	sbci	r31, 0xFE	; 254
     43c:	60 81       	ld	r22, Z
     43e:	71 81       	ldd	r23, Z+1	; 0x01
     440:	8c ed       	ldi	r24, 0xDC	; 220
     442:	92 e0       	ldi	r25, 0x02	; 2
     444:	0e 94 94 0c 	call	0x1928	; 0x1928 <_ZN5Print5printEPKc>
  Serial.print(' ');
     448:	8c ed       	ldi	r24, 0xDC	; 220
     44a:	92 e0       	ldi	r25, 0x02	; 2
     44c:	60 e2       	ldi	r22, 0x20	; 32
     44e:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <_ZN5Print5printEc>
  printPadded(chronodot.timeDate.hours);
     452:	80 91 7e 01 	lds	r24, 0x017E
     456:	90 e0       	ldi	r25, 0x00	; 0
     458:	0e 94 bc 01 	call	0x378	; 0x378 <_Z11printPaddedi>
  Serial.print(':');
     45c:	8c ed       	ldi	r24, 0xDC	; 220
     45e:	92 e0       	ldi	r25, 0x02	; 2
     460:	6a e3       	ldi	r22, 0x3A	; 58
     462:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <_ZN5Print5printEc>
  printPadded(chronodot.timeDate.minutes);
     466:	80 91 7d 01 	lds	r24, 0x017D
     46a:	90 e0       	ldi	r25, 0x00	; 0
     46c:	0e 94 bc 01 	call	0x378	; 0x378 <_Z11printPaddedi>
  Serial.print(':');
     470:	8c ed       	ldi	r24, 0xDC	; 220
     472:	92 e0       	ldi	r25, 0x02	; 2
     474:	6a e3       	ldi	r22, 0x3A	; 58
     476:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <_ZN5Print5printEc>
  printPadded(chronodot.timeDate.seconds);
     47a:	80 91 7c 01 	lds	r24, 0x017C
     47e:	90 e0       	ldi	r25, 0x00	; 0
     480:	0e 94 bc 01 	call	0x378	; 0x378 <_Z11printPaddedi>
  
  if (transition)
     484:	11 23       	and	r17, r17
     486:	31 f0       	breq	.+12     	; 0x494 <_Z8sendTimeh+0xf2>
  {
    Serial.print(F(" Enter new date and time as 'TYYYYMMDDWhhmmss' where W=1 is Sunday, W=2 is Monday, etc."));
     488:	8c ed       	ldi	r24, 0xDC	; 220
     48a:	92 e0       	ldi	r25, 0x02	; 2
     48c:	68 e6       	ldi	r22, 0x68	; 104
     48e:	70 e0       	ldi	r23, 0x00	; 0
     490:	0e 94 56 0b 	call	0x16ac	; 0x16ac <_ZN5Print5printEPK19__FlashStringHelper>
  }
  
  Serial.println();
     494:	8c ed       	ldi	r24, 0xDC	; 220
     496:	92 e0       	ldi	r25, 0x02	; 2
     498:	0e 94 81 0b 	call	0x1702	; 0x1702 <_ZN5Print7printlnEv>
}
     49c:	1f 91       	pop	r17
     49e:	0f 91       	pop	r16
     4a0:	08 95       	ret

000004a2 <loop>:
  chronodot.setSQW(1); // Set square wave pin output of 1Hz
  lastSQW = digitalRead(SQWpin);
}


void loop()
     4a2:	0f 93       	push	r16
     4a4:	1f 93       	push	r17
     4a6:	df 93       	push	r29
     4a8:	cf 93       	push	r28
     4aa:	cd b7       	in	r28, 0x3d	; 61
     4ac:	de b7       	in	r29, 0x3e	; 62
     4ae:	28 97       	sbiw	r28, 0x08	; 8
     4b0:	0f b6       	in	r0, 0x3f	; 63
     4b2:	f8 94       	cli
     4b4:	de bf       	out	0x3e, r29	; 62
     4b6:	0f be       	out	0x3f, r0	; 63
     4b8:	cd bf       	out	0x3d, r28	; 61
{
  // try to set the date and time if anything
  // shows up on the serial line
  if(Serial.available())
     4ba:	8c ed       	ldi	r24, 0xDC	; 220
     4bc:	92 e0       	ldi	r25, 0x02	; 2
     4be:	0e 94 1d 0a 	call	0x143a	; 0x143a <_ZN14HardwareSerial9availableEv>
     4c2:	89 2b       	or	r24, r25
     4c4:	71 f0       	breq	.+28     	; 0x4e2 <loop+0x40>
  {
    timeDateElements tE;
    processSyncMessage(tE);
     4c6:	8e 01       	movw	r16, r28
     4c8:	0f 5f       	subi	r16, 0xFF	; 255
     4ca:	1f 4f       	sbci	r17, 0xFF	; 255
     4cc:	c8 01       	movw	r24, r16
     4ce:	0e 94 c8 00 	call	0x190	; 0x190 <_Z18processSyncMessageR16timeDateElements>
    if (tE.month > 0)
     4d2:	8e 81       	ldd	r24, Y+6	; 0x06
     4d4:	88 23       	and	r24, r24
     4d6:	29 f0       	breq	.+10     	; 0x4e2 <loop+0x40>
    {
      chronodot.setTimeDate(tE);
     4d8:	84 e7       	ldi	r24, 0x74	; 116
     4da:	91 e0       	ldi	r25, 0x01	; 1
     4dc:	b8 01       	movw	r22, r16
     4de:	0e 94 a9 02 	call	0x552	; 0x552 <_ZN9Chronodot11setTimeDateER16timeDateElements>
    }
  }
  // read and send the time over serial
  lastSQW = sendTime(lastSQW);
     4e2:	80 91 8a 01 	lds	r24, 0x018A
     4e6:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <_Z8sendTimeh>
     4ea:	80 93 8a 01 	sts	0x018A, r24
  delay(100);
     4ee:	64 e6       	ldi	r22, 0x64	; 100
     4f0:	70 e0       	ldi	r23, 0x00	; 0
     4f2:	80 e0       	ldi	r24, 0x00	; 0
     4f4:	90 e0       	ldi	r25, 0x00	; 0
     4f6:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <delay>
}
     4fa:	28 96       	adiw	r28, 0x08	; 8
     4fc:	0f b6       	in	r0, 0x3f	; 63
     4fe:	f8 94       	cli
     500:	de bf       	out	0x3e, r29	; 62
     502:	0f be       	out	0x3f, r0	; 63
     504:	cd bf       	out	0x3d, r28	; 61
     506:	cf 91       	pop	r28
     508:	df 91       	pop	r29
     50a:	1f 91       	pop	r17
     50c:	0f 91       	pop	r16
     50e:	08 95       	ret

00000510 <setup>:
};
  

void setup()
{
  Serial.begin(115200);
     510:	8c ed       	ldi	r24, 0xDC	; 220
     512:	92 e0       	ldi	r25, 0x02	; 2
     514:	40 e0       	ldi	r20, 0x00	; 0
     516:	52 ec       	ldi	r21, 0xC2	; 194
     518:	61 e0       	ldi	r22, 0x01	; 1
     51a:	70 e0       	ldi	r23, 0x00	; 0
     51c:	0e 94 96 09 	call	0x132c	; 0x132c <_ZN14HardwareSerial5beginEm>
  chronodot.setSQW(1); // Set square wave pin output of 1Hz
     520:	84 e7       	ldi	r24, 0x74	; 116
     522:	91 e0       	ldi	r25, 0x01	; 1
     524:	61 e0       	ldi	r22, 0x01	; 1
     526:	70 e0       	ldi	r23, 0x00	; 0
     528:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <_ZN9Chronodot6setSQWEi>
  lastSQW = digitalRead(SQWpin);
     52c:	85 e0       	ldi	r24, 0x05	; 5
     52e:	0e 94 b9 08 	call	0x1172	; 0x1172 <digitalRead>
     532:	80 93 8a 01 	sts	0x018A, r24
}
     536:	08 95       	ret

00000538 <_Z7dec2bcdh>:
#include "Chronodot.h"

#define DS3231_CTRL_ID 0x68 


uint8_t dec2bcd(uint8_t num) {
     538:	28 2f       	mov	r18, r24
     53a:	6a e0       	ldi	r22, 0x0A	; 10
     53c:	0e 94 b6 0c 	call	0x196c	; 0x196c <__udivmodqi4>
     540:	38 2f       	mov	r19, r24
     542:	32 95       	swap	r19
     544:	30 7f       	andi	r19, 0xF0	; 240
     546:	82 2f       	mov	r24, r18
     548:	0e 94 b6 0c 	call	0x196c	; 0x196c <__udivmodqi4>
    return ((num / 10) << 4) + (num % 10);
}
     54c:	83 2f       	mov	r24, r19
     54e:	89 0f       	add	r24, r25
     550:	08 95       	ret

00000552 <_ZN9Chronodot11setTimeDateER16timeDateElements>:
    Wire.write(register0E);
    Wire.endTransmission();
}


void Chronodot::setTimeDate(timeDateElements &tE) {
     552:	ef 92       	push	r14
     554:	ff 92       	push	r15
     556:	0f 93       	push	r16
     558:	1f 93       	push	r17
     55a:	7b 01       	movw	r14, r22
    Wire.beginTransmission(DS3231_CTRL_ID);
     55c:	01 ed       	ldi	r16, 0xD1	; 209
     55e:	11 e0       	ldi	r17, 0x01	; 1
     560:	c8 01       	movw	r24, r16
     562:	68 e6       	ldi	r22, 0x68	; 104
     564:	70 e0       	ldi	r23, 0x00	; 0
     566:	0e 94 3c 04 	call	0x878	; 0x878 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write((uint8_t)0x00);
     56a:	c8 01       	movw	r24, r16
     56c:	60 e0       	ldi	r22, 0x00	; 0
     56e:	0e 94 be 04 	call	0x97c	; 0x97c <_ZN7TwoWire5writeEh>
    Wire.write(dec2bcd(tE.seconds));
     572:	f7 01       	movw	r30, r14
     574:	80 81       	ld	r24, Z
     576:	0e 94 9c 02 	call	0x538	; 0x538 <_Z7dec2bcdh>
     57a:	68 2f       	mov	r22, r24
     57c:	c8 01       	movw	r24, r16
     57e:	0e 94 be 04 	call	0x97c	; 0x97c <_ZN7TwoWire5writeEh>
    Wire.write(dec2bcd(tE.minutes));
     582:	f7 01       	movw	r30, r14
     584:	81 81       	ldd	r24, Z+1	; 0x01
     586:	0e 94 9c 02 	call	0x538	; 0x538 <_Z7dec2bcdh>
     58a:	68 2f       	mov	r22, r24
     58c:	c8 01       	movw	r24, r16
     58e:	0e 94 be 04 	call	0x97c	; 0x97c <_ZN7TwoWire5writeEh>
    Wire.write(dec2bcd(tE.hours));
     592:	f7 01       	movw	r30, r14
     594:	82 81       	ldd	r24, Z+2	; 0x02
     596:	0e 94 9c 02 	call	0x538	; 0x538 <_Z7dec2bcdh>
     59a:	68 2f       	mov	r22, r24
     59c:	c8 01       	movw	r24, r16
     59e:	0e 94 be 04 	call	0x97c	; 0x97c <_ZN7TwoWire5writeEh>
    Wire.write(dec2bcd(tE.weekDay));
     5a2:	f7 01       	movw	r30, r14
     5a4:	83 81       	ldd	r24, Z+3	; 0x03
     5a6:	0e 94 9c 02 	call	0x538	; 0x538 <_Z7dec2bcdh>
     5aa:	68 2f       	mov	r22, r24
     5ac:	c8 01       	movw	r24, r16
     5ae:	0e 94 be 04 	call	0x97c	; 0x97c <_ZN7TwoWire5writeEh>
    Wire.write(dec2bcd(tE.day));
     5b2:	f7 01       	movw	r30, r14
     5b4:	84 81       	ldd	r24, Z+4	; 0x04
     5b6:	0e 94 9c 02 	call	0x538	; 0x538 <_Z7dec2bcdh>
     5ba:	68 2f       	mov	r22, r24
     5bc:	c8 01       	movw	r24, r16
     5be:	0e 94 be 04 	call	0x97c	; 0x97c <_ZN7TwoWire5writeEh>
    Wire.write(dec2bcd(tE.month));
     5c2:	f7 01       	movw	r30, r14
     5c4:	85 81       	ldd	r24, Z+5	; 0x05
     5c6:	0e 94 9c 02 	call	0x538	; 0x538 <_Z7dec2bcdh>
     5ca:	68 2f       	mov	r22, r24
     5cc:	c8 01       	movw	r24, r16
     5ce:	0e 94 be 04 	call	0x97c	; 0x97c <_ZN7TwoWire5writeEh>
    Wire.write(dec2bcd(tE.year - 1970));
     5d2:	f7 01       	movw	r30, r14
     5d4:	86 81       	ldd	r24, Z+6	; 0x06
     5d6:	82 5b       	subi	r24, 0xB2	; 178
     5d8:	0e 94 9c 02 	call	0x538	; 0x538 <_Z7dec2bcdh>
     5dc:	68 2f       	mov	r22, r24
     5de:	c8 01       	movw	r24, r16
     5e0:	0e 94 be 04 	call	0x97c	; 0x97c <_ZN7TwoWire5writeEh>
    Wire.endTransmission();
     5e4:	c8 01       	movw	r24, r16
     5e6:	0e 94 01 05 	call	0xa02	; 0xa02 <_ZN7TwoWire15endTransmissionEv>
}
     5ea:	1f 91       	pop	r17
     5ec:	0f 91       	pop	r16
     5ee:	ff 90       	pop	r15
     5f0:	ef 90       	pop	r14
     5f2:	08 95       	ret

000005f4 <_ZN9Chronodot6setSQWEi>:
    temperatureIntBCD      = dec2bcd(tempInt);
    temperatureFractionBCD = dec2bcd(tempFraction);
}


void Chronodot::setSQW(int frequency) {
     5f4:	1f 93       	push	r17
     5f6:	cf 93       	push	r28
     5f8:	df 93       	push	r29
     5fa:	eb 01       	movw	r28, r22
    // Frequency is stored in register 0x0e in bit 3 and 4
    Wire.beginTransmission(DS3231_CTRL_ID);
     5fc:	81 ed       	ldi	r24, 0xD1	; 209
     5fe:	91 e0       	ldi	r25, 0x01	; 1
     600:	68 e6       	ldi	r22, 0x68	; 104
     602:	70 e0       	ldi	r23, 0x00	; 0
     604:	0e 94 3c 04 	call	0x878	; 0x878 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write((uint8_t)0x0e);
     608:	81 ed       	ldi	r24, 0xD1	; 209
     60a:	91 e0       	ldi	r25, 0x01	; 1
     60c:	6e e0       	ldi	r22, 0x0E	; 14
     60e:	0e 94 be 04 	call	0x97c	; 0x97c <_ZN7TwoWire5writeEh>
    Wire.endTransmission();
     612:	81 ed       	ldi	r24, 0xD1	; 209
     614:	91 e0       	ldi	r25, 0x01	; 1
     616:	0e 94 01 05 	call	0xa02	; 0xa02 <_ZN7TwoWire15endTransmissionEv>
    Wire.requestFrom(DS3231_CTRL_ID, 1);
     61a:	81 ed       	ldi	r24, 0xD1	; 209
     61c:	91 e0       	ldi	r25, 0x01	; 1
     61e:	68 e6       	ldi	r22, 0x68	; 104
     620:	70 e0       	ldi	r23, 0x00	; 0
     622:	41 e0       	ldi	r20, 0x01	; 1
     624:	50 e0       	ldi	r21, 0x00	; 0
     626:	0e 94 12 05 	call	0xa24	; 0xa24 <_ZN7TwoWire11requestFromEii>
    uint8_t register0E = Wire.read();
     62a:	81 ed       	ldi	r24, 0xD1	; 209
     62c:	91 e0       	ldi	r25, 0x01	; 1
     62e:	0e 94 4f 04 	call	0x89e	; 0x89e <_ZN7TwoWire4readEv>
     632:	18 2f       	mov	r17, r24
  

    // set frequency by changing bits 3 (RS1) and 4 (RS2)
    if (frequency == 1) {
     634:	c1 30       	cpi	r28, 0x01	; 1
     636:	d1 05       	cpc	r29, r1
     638:	11 f4       	brne	.+4      	; 0x63e <_ZN9Chronodot6setSQWEi+0x4a>
        // clear bits 3 and 4
        register0E &= ~(1 << 3);
        register0E &= ~(1 << 4);
     63a:	17 7e       	andi	r17, 0xE7	; 231
     63c:	12 c0       	rjmp	.+36     	; 0x662 <_ZN9Chronodot6setSQWEi+0x6e>
    } else if (frequency == 1024) {
     63e:	84 e0       	ldi	r24, 0x04	; 4
     640:	c0 30       	cpi	r28, 0x00	; 0
     642:	d8 07       	cpc	r29, r24
     644:	19 f4       	brne	.+6      	; 0x64c <_ZN9Chronodot6setSQWEi+0x58>
        // bit 3 is 1, bit 4 is 0
        register0E |= 1 << 3;
     646:	18 60       	ori	r17, 0x08	; 8
        register0E &= ~(1 << 4);
     648:	1f 7e       	andi	r17, 0xEF	; 239
     64a:	0b c0       	rjmp	.+22     	; 0x662 <_ZN9Chronodot6setSQWEi+0x6e>
    } else if (frequency == 4096) {
     64c:	80 e1       	ldi	r24, 0x10	; 16
     64e:	c0 30       	cpi	r28, 0x00	; 0
     650:	d8 07       	cpc	r29, r24
     652:	19 f4       	brne	.+6      	; 0x65a <_ZN9Chronodot6setSQWEi+0x66>
        // bit 3 is 0, bit 4 is 1
        register0E &= ~(1 << 3);
     654:	17 7f       	andi	r17, 0xF7	; 247
        register0E |= 1 << 4;
     656:	10 61       	ori	r17, 0x10	; 16
     658:	04 c0       	rjmp	.+8      	; 0x662 <_ZN9Chronodot6setSQWEi+0x6e>
    } else if (frequency == 8192) {
     65a:	c0 50       	subi	r28, 0x00	; 0
     65c:	d0 42       	sbci	r29, 0x20	; 32
     65e:	09 f4       	brne	.+2      	; 0x662 <_ZN9Chronodot6setSQWEi+0x6e>
        // set bits 3 and 4
        register0E |= 1 << 3;
        register0E |= 1 << 4;
     660:	18 61       	ori	r17, 0x18	; 24

    // clear bit 2 (INTCN) to enable SWQ
    register0E &= ~(1 << 2);
  
    // put the value of the register back
    Wire.beginTransmission(DS3231_CTRL_ID);
     662:	81 ed       	ldi	r24, 0xD1	; 209
     664:	91 e0       	ldi	r25, 0x01	; 1
     666:	68 e6       	ldi	r22, 0x68	; 104
     668:	70 e0       	ldi	r23, 0x00	; 0
     66a:	0e 94 3c 04 	call	0x878	; 0x878 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write((uint8_t)0x0e);
     66e:	81 ed       	ldi	r24, 0xD1	; 209
     670:	91 e0       	ldi	r25, 0x01	; 1
     672:	6e e0       	ldi	r22, 0x0E	; 14
     674:	0e 94 be 04 	call	0x97c	; 0x97c <_ZN7TwoWire5writeEh>
    Wire.write(register0E);
     678:	1b 7f       	andi	r17, 0xFB	; 251
     67a:	81 ed       	ldi	r24, 0xD1	; 209
     67c:	91 e0       	ldi	r25, 0x01	; 1
     67e:	61 2f       	mov	r22, r17
     680:	0e 94 be 04 	call	0x97c	; 0x97c <_ZN7TwoWire5writeEh>
    Wire.endTransmission();
     684:	81 ed       	ldi	r24, 0xD1	; 209
     686:	91 e0       	ldi	r25, 0x01	; 1
     688:	0e 94 01 05 	call	0xa02	; 0xa02 <_ZN7TwoWire15endTransmissionEv>
}
     68c:	df 91       	pop	r29
     68e:	cf 91       	pop	r28
     690:	1f 91       	pop	r17
     692:	08 95       	ret

00000694 <_ZN9Chronodot12readTimeDateEv>:

    temperature = 0;
}


void Chronodot::readTimeDate() {
     694:	ef 92       	push	r14
     696:	ff 92       	push	r15
     698:	0f 93       	push	r16
     69a:	1f 93       	push	r17
     69c:	8c 01       	movw	r16, r24
    Wire.beginTransmission(DS3231_CTRL_ID);
     69e:	e1 ed       	ldi	r30, 0xD1	; 209
     6a0:	ee 2e       	mov	r14, r30
     6a2:	e1 e0       	ldi	r30, 0x01	; 1
     6a4:	fe 2e       	mov	r15, r30
     6a6:	c7 01       	movw	r24, r14
     6a8:	68 e6       	ldi	r22, 0x68	; 104
     6aa:	70 e0       	ldi	r23, 0x00	; 0
     6ac:	0e 94 3c 04 	call	0x878	; 0x878 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write((uint8_t)0x00);
     6b0:	c7 01       	movw	r24, r14
     6b2:	60 e0       	ldi	r22, 0x00	; 0
     6b4:	0e 94 be 04 	call	0x97c	; 0x97c <_ZN7TwoWire5writeEh>
    Wire.endTransmission();
     6b8:	c7 01       	movw	r24, r14
     6ba:	0e 94 01 05 	call	0xa02	; 0xa02 <_ZN7TwoWire15endTransmissionEv>

    Wire.requestFrom(DS3231_CTRL_ID, 7);
     6be:	c7 01       	movw	r24, r14
     6c0:	68 e6       	ldi	r22, 0x68	; 104
     6c2:	70 e0       	ldi	r23, 0x00	; 0
     6c4:	47 e0       	ldi	r20, 0x07	; 7
     6c6:	50 e0       	ldi	r21, 0x00	; 0
     6c8:	0e 94 12 05 	call	0xa24	; 0xa24 <_ZN7TwoWire11requestFromEii>
    timeDateBCD.seconds = Wire.read() & 0b01111111; // ignore bit 7
     6cc:	c7 01       	movw	r24, r14
     6ce:	0e 94 4f 04 	call	0x89e	; 0x89e <_ZN7TwoWire4readEv>
     6d2:	8f 77       	andi	r24, 0x7F	; 127
     6d4:	f8 01       	movw	r30, r16
     6d6:	80 83       	st	Z, r24
    timeDateBCD.minutes = Wire.read();
     6d8:	c7 01       	movw	r24, r14
     6da:	0e 94 4f 04 	call	0x89e	; 0x89e <_ZN7TwoWire4readEv>
     6de:	f8 01       	movw	r30, r16
     6e0:	81 83       	std	Z+1, r24	; 0x01
    timeDateBCD.hours   = Wire.read() & 0b00111111; // ignore bit 6 and 7
     6e2:	c7 01       	movw	r24, r14
     6e4:	0e 94 4f 04 	call	0x89e	; 0x89e <_ZN7TwoWire4readEv>
     6e8:	8f 73       	andi	r24, 0x3F	; 63
     6ea:	f8 01       	movw	r30, r16
     6ec:	82 83       	std	Z+2, r24	; 0x02
    timeDateBCD.weekDay = Wire.read();
     6ee:	c7 01       	movw	r24, r14
     6f0:	0e 94 4f 04 	call	0x89e	; 0x89e <_ZN7TwoWire4readEv>
     6f4:	f8 01       	movw	r30, r16
     6f6:	83 83       	std	Z+3, r24	; 0x03
    timeDateBCD.day     = Wire.read();
     6f8:	c7 01       	movw	r24, r14
     6fa:	0e 94 4f 04 	call	0x89e	; 0x89e <_ZN7TwoWire4readEv>
     6fe:	f8 01       	movw	r30, r16
     700:	84 83       	std	Z+4, r24	; 0x04
    timeDateBCD.month   = Wire.read() & 0b01111111; // ignore bit 7
     702:	c7 01       	movw	r24, r14
     704:	0e 94 4f 04 	call	0x89e	; 0x89e <_ZN7TwoWire4readEv>
     708:	68 2f       	mov	r22, r24
     70a:	6f 77       	andi	r22, 0x7F	; 127
     70c:	f8 01       	movw	r30, r16
     70e:	65 83       	std	Z+5, r22	; 0x05

    timeDate.seconds = bcd2dec(timeDateBCD.seconds);
     710:	90 81       	ld	r25, Z
     712:	29 2f       	mov	r18, r25
     714:	22 95       	swap	r18
     716:	2f 70       	andi	r18, 0x0F	; 15
     718:	30 e0       	ldi	r19, 0x00	; 0
     71a:	a9 01       	movw	r20, r18
     71c:	73 e0       	ldi	r23, 0x03	; 3
     71e:	44 0f       	add	r20, r20
     720:	55 1f       	adc	r21, r21
     722:	7a 95       	dec	r23
     724:	e1 f7       	brne	.-8      	; 0x71e <_ZN9Chronodot12readTimeDateEv+0x8a>
     726:	22 0f       	add	r18, r18
     728:	33 1f       	adc	r19, r19
     72a:	42 0f       	add	r20, r18
     72c:	53 1f       	adc	r21, r19
     72e:	9f 70       	andi	r25, 0x0F	; 15
     730:	94 0f       	add	r25, r20
     732:	90 87       	std	Z+8, r25	; 0x08
    timeDate.minutes = bcd2dec(timeDateBCD.minutes);
     734:	91 81       	ldd	r25, Z+1	; 0x01
     736:	29 2f       	mov	r18, r25
     738:	22 95       	swap	r18
     73a:	2f 70       	andi	r18, 0x0F	; 15
     73c:	30 e0       	ldi	r19, 0x00	; 0
     73e:	a9 01       	movw	r20, r18
     740:	a3 e0       	ldi	r26, 0x03	; 3
     742:	44 0f       	add	r20, r20
     744:	55 1f       	adc	r21, r21
     746:	aa 95       	dec	r26
     748:	e1 f7       	brne	.-8      	; 0x742 <_ZN9Chronodot12readTimeDateEv+0xae>
     74a:	22 0f       	add	r18, r18
     74c:	33 1f       	adc	r19, r19
     74e:	42 0f       	add	r20, r18
     750:	53 1f       	adc	r21, r19
     752:	9f 70       	andi	r25, 0x0F	; 15
     754:	94 0f       	add	r25, r20
     756:	91 87       	std	Z+9, r25	; 0x09
    timeDate.hours   = bcd2dec(timeDateBCD.hours);
     758:	92 81       	ldd	r25, Z+2	; 0x02
     75a:	29 2f       	mov	r18, r25
     75c:	22 95       	swap	r18
     75e:	2f 70       	andi	r18, 0x0F	; 15
     760:	30 e0       	ldi	r19, 0x00	; 0
     762:	a9 01       	movw	r20, r18
     764:	b3 e0       	ldi	r27, 0x03	; 3
     766:	44 0f       	add	r20, r20
     768:	55 1f       	adc	r21, r21
     76a:	ba 95       	dec	r27
     76c:	e1 f7       	brne	.-8      	; 0x766 <_ZN9Chronodot12readTimeDateEv+0xd2>
     76e:	22 0f       	add	r18, r18
     770:	33 1f       	adc	r19, r19
     772:	42 0f       	add	r20, r18
     774:	53 1f       	adc	r21, r19
     776:	9f 70       	andi	r25, 0x0F	; 15
     778:	94 0f       	add	r25, r20
     77a:	92 87       	std	Z+10, r25	; 0x0a
    timeDate.weekDay = bcd2dec(timeDateBCD.weekDay);
     77c:	93 81       	ldd	r25, Z+3	; 0x03
     77e:	29 2f       	mov	r18, r25
     780:	22 95       	swap	r18
     782:	2f 70       	andi	r18, 0x0F	; 15
     784:	30 e0       	ldi	r19, 0x00	; 0
     786:	a9 01       	movw	r20, r18
     788:	73 e0       	ldi	r23, 0x03	; 3
     78a:	44 0f       	add	r20, r20
     78c:	55 1f       	adc	r21, r21
     78e:	7a 95       	dec	r23
     790:	e1 f7       	brne	.-8      	; 0x78a <_ZN9Chronodot12readTimeDateEv+0xf6>
     792:	22 0f       	add	r18, r18
     794:	33 1f       	adc	r19, r19
     796:	42 0f       	add	r20, r18
     798:	53 1f       	adc	r21, r19
     79a:	9f 70       	andi	r25, 0x0F	; 15
     79c:	94 0f       	add	r25, r20
     79e:	93 87       	std	Z+11, r25	; 0x0b
    timeDate.day     = bcd2dec(timeDateBCD.day);
     7a0:	94 81       	ldd	r25, Z+4	; 0x04
     7a2:	29 2f       	mov	r18, r25
     7a4:	22 95       	swap	r18
     7a6:	2f 70       	andi	r18, 0x0F	; 15
     7a8:	30 e0       	ldi	r19, 0x00	; 0
     7aa:	a9 01       	movw	r20, r18
     7ac:	a3 e0       	ldi	r26, 0x03	; 3
     7ae:	44 0f       	add	r20, r20
     7b0:	55 1f       	adc	r21, r21
     7b2:	aa 95       	dec	r26
     7b4:	e1 f7       	brne	.-8      	; 0x7ae <_ZN9Chronodot12readTimeDateEv+0x11a>
     7b6:	22 0f       	add	r18, r18
     7b8:	33 1f       	adc	r19, r19
     7ba:	42 0f       	add	r20, r18
     7bc:	53 1f       	adc	r21, r19
     7be:	9f 70       	andi	r25, 0x0F	; 15
     7c0:	94 0f       	add	r25, r20
     7c2:	94 87       	std	Z+12, r25	; 0x0c
    timeDate.month   = bcd2dec(timeDateBCD.month);
     7c4:	62 95       	swap	r22
     7c6:	6f 70       	andi	r22, 0x0F	; 15
     7c8:	70 e0       	ldi	r23, 0x00	; 0
     7ca:	9b 01       	movw	r18, r22
     7cc:	53 e0       	ldi	r21, 0x03	; 3
     7ce:	22 0f       	add	r18, r18
     7d0:	33 1f       	adc	r19, r19
     7d2:	5a 95       	dec	r21
     7d4:	e1 f7       	brne	.-8      	; 0x7ce <_ZN9Chronodot12readTimeDateEv+0x13a>
     7d6:	66 0f       	add	r22, r22
     7d8:	77 1f       	adc	r23, r23
     7da:	26 0f       	add	r18, r22
     7dc:	37 1f       	adc	r19, r23
     7de:	8f 70       	andi	r24, 0x0F	; 15
     7e0:	82 0f       	add	r24, r18
     7e2:	85 87       	std	Z+13, r24	; 0x0d

    // some special handling for the year
    timeDate.year    = bcd2dec(Wire.read()) + 1970;
     7e4:	c7 01       	movw	r24, r14
     7e6:	0e 94 4f 04 	call	0x89e	; 0x89e <_ZN7TwoWire4readEv>
     7ea:	28 2f       	mov	r18, r24
     7ec:	22 95       	swap	r18
     7ee:	2f 70       	andi	r18, 0x0F	; 15
     7f0:	30 e0       	ldi	r19, 0x00	; 0
     7f2:	a9 01       	movw	r20, r18
     7f4:	93 e0       	ldi	r25, 0x03	; 3
     7f6:	44 0f       	add	r20, r20
     7f8:	55 1f       	adc	r21, r21
     7fa:	9a 95       	dec	r25
     7fc:	e1 f7       	brne	.-8      	; 0x7f6 <_ZN9Chronodot12readTimeDateEv+0x162>
     7fe:	22 0f       	add	r18, r18
     800:	33 1f       	adc	r19, r19
     802:	42 0f       	add	r20, r18
     804:	53 1f       	adc	r21, r19
     806:	8f 70       	andi	r24, 0x0F	; 15
     808:	84 0f       	add	r24, r20
     80a:	90 e0       	ldi	r25, 0x00	; 0
     80c:	8e 54       	subi	r24, 0x4E	; 78
     80e:	98 4f       	sbci	r25, 0xF8	; 248
     810:	f8 01       	movw	r30, r16
     812:	97 87       	std	Z+15, r25	; 0x0f
     814:	86 87       	std	Z+14, r24	; 0x0e
    timeDateBCD.year = dec2bcd(timeDate.year % 1000);
     816:	68 ee       	ldi	r22, 0xE8	; 232
     818:	73 e0       	ldi	r23, 0x03	; 3
     81a:	0e 94 c2 0c 	call	0x1984	; 0x1984 <__udivmodhi4>
     81e:	0e 94 9c 02 	call	0x538	; 0x538 <_Z7dec2bcdh>
     822:	f8 01       	movw	r30, r16
     824:	86 83       	std	Z+6, r24	; 0x06
     826:	17 82       	std	Z+7, r1	; 0x07
}
     828:	1f 91       	pop	r17
     82a:	0f 91       	pop	r16
     82c:	ff 90       	pop	r15
     82e:	ef 90       	pop	r14
     830:	08 95       	ret

00000832 <_ZN9ChronodotC1Ev>:
uint8_t bcd2dec(uint8_t num) {
    return (((num >> 4) & 0b00001111) * 10) + (num & 0b00001111);
}


Chronodot::Chronodot() {
     832:	0f 93       	push	r16
     834:	1f 93       	push	r17
     836:	8c 01       	movw	r16, r24
    Wire.begin();
     838:	81 ed       	ldi	r24, 0xD1	; 209
     83a:	91 e0       	ldi	r25, 0x01	; 1
     83c:	0e 94 16 05 	call	0xa2c	; 0xa2c <_ZN7TwoWire5beginEv>

    timeDateBCD.seconds = 0;
     840:	f8 01       	movw	r30, r16
     842:	10 82       	st	Z, r1
    timeDateBCD.minutes = 0;
     844:	11 82       	std	Z+1, r1	; 0x01
    timeDateBCD.hours   = 0;
     846:	12 82       	std	Z+2, r1	; 0x02
    timeDateBCD.weekDay = 0;
     848:	13 82       	std	Z+3, r1	; 0x03
    timeDateBCD.day     = 0;
     84a:	14 82       	std	Z+4, r1	; 0x04
    timeDateBCD.month   = 0;
     84c:	15 82       	std	Z+5, r1	; 0x05
    timeDateBCD.year    = 0;
     84e:	17 82       	std	Z+7, r1	; 0x07
     850:	16 82       	std	Z+6, r1	; 0x06

    timeDate.seconds = 0;
     852:	10 86       	std	Z+8, r1	; 0x08
    timeDate.minutes = 0;
     854:	11 86       	std	Z+9, r1	; 0x09
    timeDate.hours   = 0;
     856:	12 86       	std	Z+10, r1	; 0x0a
    timeDate.weekDay = 0;
     858:	13 86       	std	Z+11, r1	; 0x0b
    timeDate.day     = 0;
     85a:	14 86       	std	Z+12, r1	; 0x0c
    timeDate.month   = 0;
     85c:	15 86       	std	Z+13, r1	; 0x0d
    timeDate.year    = 0;
     85e:	17 86       	std	Z+15, r1	; 0x0f
     860:	16 86       	std	Z+14, r1	; 0x0e

    temperature = 0;
     862:	80 e0       	ldi	r24, 0x00	; 0
     864:	90 e0       	ldi	r25, 0x00	; 0
     866:	a0 e0       	ldi	r26, 0x00	; 0
     868:	b0 e0       	ldi	r27, 0x00	; 0
     86a:	80 8b       	std	Z+16, r24	; 0x10
     86c:	91 8b       	std	Z+17, r25	; 0x11
     86e:	a2 8b       	std	Z+18, r26	; 0x12
     870:	b3 8b       	std	Z+19, r27	; 0x13
}
     872:	1f 91       	pop	r17
     874:	0f 91       	pop	r16
     876:	08 95       	ret

00000878 <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
     878:	81 e0       	ldi	r24, 0x01	; 1
     87a:	80 93 d0 01 	sts	0x01D0, r24
  // set address of targeted slave
  txAddress = address;
     87e:	60 93 ad 01 	sts	0x01AD, r22
  // reset tx buffer iterator vars
  txBufferIndex = 0;
     882:	10 92 ce 01 	sts	0x01CE, r1
  txBufferLength = 0;
     886:	10 92 cf 01 	sts	0x01CF, r1
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
}
     88a:	08 95       	ret

0000088c <_ZN7TwoWire9availableEv>:
}

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
     88c:	20 91 ac 01 	lds	r18, 0x01AC
     890:	30 e0       	ldi	r19, 0x00	; 0
     892:	80 91 ab 01 	lds	r24, 0x01AB
     896:	28 1b       	sub	r18, r24
     898:	31 09       	sbc	r19, r1
{
  return rxBufferLength - rxBufferIndex;
}
     89a:	c9 01       	movw	r24, r18
     89c:	08 95       	ret

0000089e <_ZN7TwoWire4readEv>:
int TwoWire::read(void)
{
  int value = -1;
  
  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
     89e:	40 91 ab 01 	lds	r20, 0x01AB
     8a2:	80 91 ac 01 	lds	r24, 0x01AC
     8a6:	48 17       	cp	r20, r24
     8a8:	18 f0       	brcs	.+6      	; 0x8b0 <_ZN7TwoWire4readEv+0x12>
     8aa:	2f ef       	ldi	r18, 0xFF	; 255
     8ac:	3f ef       	ldi	r19, 0xFF	; 255
     8ae:	0a c0       	rjmp	.+20     	; 0x8c4 <_ZN7TwoWire4readEv+0x26>
    value = rxBuffer[rxBufferIndex];
     8b0:	e4 2f       	mov	r30, r20
     8b2:	f0 e0       	ldi	r31, 0x00	; 0
     8b4:	e5 57       	subi	r30, 0x75	; 117
     8b6:	fe 4f       	sbci	r31, 0xFE	; 254
     8b8:	80 81       	ld	r24, Z
     8ba:	28 2f       	mov	r18, r24
     8bc:	30 e0       	ldi	r19, 0x00	; 0
    ++rxBufferIndex;
     8be:	4f 5f       	subi	r20, 0xFF	; 255
     8c0:	40 93 ab 01 	sts	0x01AB, r20
  }

  return value;
}
     8c4:	c9 01       	movw	r24, r18
     8c6:	08 95       	ret

000008c8 <_ZN7TwoWire4peekEv>:
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  int value = -1;
  
  if(rxBufferIndex < rxBufferLength){
     8c8:	e0 91 ab 01 	lds	r30, 0x01AB
     8cc:	80 91 ac 01 	lds	r24, 0x01AC
     8d0:	e8 17       	cp	r30, r24
     8d2:	18 f0       	brcs	.+6      	; 0x8da <_ZN7TwoWire4peekEv+0x12>
     8d4:	ef ef       	ldi	r30, 0xFF	; 255
     8d6:	ff ef       	ldi	r31, 0xFF	; 255
     8d8:	06 c0       	rjmp	.+12     	; 0x8e6 <_ZN7TwoWire4peekEv+0x1e>
    value = rxBuffer[rxBufferIndex];
     8da:	f0 e0       	ldi	r31, 0x00	; 0
     8dc:	e5 57       	subi	r30, 0x75	; 117
     8de:	fe 4f       	sbci	r31, 0xFE	; 254
     8e0:	80 81       	ld	r24, Z
     8e2:	e8 2f       	mov	r30, r24
     8e4:	f0 e0       	ldi	r31, 0x00	; 0
  }

  return value;
}
     8e6:	cf 01       	movw	r24, r30
     8e8:	08 95       	ret

000008ea <_ZN7TwoWire5flushEv>:

void TwoWire::flush(void)
{
  // XXX: to be implemented.
}
     8ea:	08 95       	ret

000008ec <_GLOBAL__I__ZN7TwoWire8rxBufferE>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     8ec:	10 92 d4 01 	sts	0x01D4, r1
     8f0:	10 92 d3 01 	sts	0x01D3, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
     8f4:	88 ee       	ldi	r24, 0xE8	; 232
     8f6:	93 e0       	ldi	r25, 0x03	; 3
     8f8:	a0 e0       	ldi	r26, 0x00	; 0
     8fa:	b0 e0       	ldi	r27, 0x00	; 0
     8fc:	80 93 d5 01 	sts	0x01D5, r24
     900:	90 93 d6 01 	sts	0x01D6, r25
     904:	a0 93 d7 01 	sts	0x01D7, r26
     908:	b0 93 d8 01 	sts	0x01D8, r27
void (*TwoWire::user_onRequest)(void);
void (*TwoWire::user_onReceive)(int);

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire()
     90c:	88 e5       	ldi	r24, 0x58	; 88
     90e:	91 e0       	ldi	r25, 0x01	; 1
     910:	90 93 d2 01 	sts	0x01D2, r25
     914:	80 93 d1 01 	sts	0x01D1, r24
  user_onRequest = function;
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
     918:	08 95       	ret

0000091a <_ZN7TwoWire5writeEPKhj>:
}

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
     91a:	cf 92       	push	r12
     91c:	df 92       	push	r13
     91e:	ef 92       	push	r14
     920:	ff 92       	push	r15
     922:	0f 93       	push	r16
     924:	1f 93       	push	r17
     926:	cf 93       	push	r28
     928:	df 93       	push	r29
     92a:	7c 01       	movw	r14, r24
     92c:	6b 01       	movw	r12, r22
     92e:	8a 01       	movw	r16, r20
{
  if(transmitting){
     930:	80 91 d0 01 	lds	r24, 0x01D0
     934:	88 23       	and	r24, r24
     936:	a1 f0       	breq	.+40     	; 0x960 <_ZN7TwoWire5writeEPKhj+0x46>
     938:	c0 e0       	ldi	r28, 0x00	; 0
     93a:	d0 e0       	ldi	r29, 0x00	; 0
     93c:	0d c0       	rjmp	.+26     	; 0x958 <_ZN7TwoWire5writeEPKhj+0x3e>
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
      write(data[i]);
     93e:	d7 01       	movw	r26, r14
     940:	ed 91       	ld	r30, X+
     942:	fc 91       	ld	r31, X
     944:	d6 01       	movw	r26, r12
     946:	ac 0f       	add	r26, r28
     948:	bd 1f       	adc	r27, r29
     94a:	01 90       	ld	r0, Z+
     94c:	f0 81       	ld	r31, Z
     94e:	e0 2d       	mov	r30, r0
     950:	c7 01       	movw	r24, r14
     952:	6c 91       	ld	r22, X
     954:	09 95       	icall
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  if(transmitting){
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
     956:	21 96       	adiw	r28, 0x01	; 1
     958:	c0 17       	cp	r28, r16
     95a:	d1 07       	cpc	r29, r17
     95c:	80 f3       	brcs	.-32     	; 0x93e <_ZN7TwoWire5writeEPKhj+0x24>
     95e:	04 c0       	rjmp	.+8      	; 0x968 <_ZN7TwoWire5writeEPKhj+0x4e>
      write(data[i]);
    }
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(data, quantity);
     960:	cb 01       	movw	r24, r22
     962:	64 2f       	mov	r22, r20
     964:	0e 94 bf 05 	call	0xb7e	; 0xb7e <twi_transmit>
  }
  return quantity;
}
     968:	c8 01       	movw	r24, r16
     96a:	df 91       	pop	r29
     96c:	cf 91       	pop	r28
     96e:	1f 91       	pop	r17
     970:	0f 91       	pop	r16
     972:	ff 90       	pop	r15
     974:	ef 90       	pop	r14
     976:	df 90       	pop	r13
     978:	cf 90       	pop	r12
     97a:	08 95       	ret

0000097c <_ZN7TwoWire5writeEh>:
}

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
     97c:	df 93       	push	r29
     97e:	cf 93       	push	r28
     980:	0f 92       	push	r0
     982:	cd b7       	in	r28, 0x3d	; 61
     984:	de b7       	in	r29, 0x3e	; 62
     986:	fc 01       	movw	r30, r24
     988:	69 83       	std	Y+1, r22	; 0x01
{
  if(transmitting){
     98a:	80 91 d0 01 	lds	r24, 0x01D0
     98e:	88 23       	and	r24, r24
     990:	c9 f0       	breq	.+50     	; 0x9c4 <_ZN7TwoWire5writeEh+0x48>
  // in master transmitter mode
    // don't bother if buffer is full
    if(txBufferLength >= BUFFER_LENGTH){
     992:	80 91 cf 01 	lds	r24, 0x01CF
     996:	80 32       	cpi	r24, 0x20	; 32
     998:	38 f0       	brcs	.+14     	; 0x9a8 <_ZN7TwoWire5writeEh+0x2c>
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
     99a:	81 e0       	ldi	r24, 0x01	; 1
     99c:	90 e0       	ldi	r25, 0x00	; 0
     99e:	93 83       	std	Z+3, r25	; 0x03
     9a0:	82 83       	std	Z+2, r24	; 0x02
     9a2:	20 e0       	ldi	r18, 0x00	; 0
     9a4:	30 e0       	ldi	r19, 0x00	; 0
     9a6:	15 c0       	rjmp	.+42     	; 0x9d2 <_ZN7TwoWire5writeEh+0x56>
      setWriteError();
      return 0;
    }
    // put byte in tx buffer
    txBuffer[txBufferIndex] = data;
     9a8:	80 91 ce 01 	lds	r24, 0x01CE
     9ac:	e8 2f       	mov	r30, r24
     9ae:	f0 e0       	ldi	r31, 0x00	; 0
     9b0:	e2 55       	subi	r30, 0x52	; 82
     9b2:	fe 4f       	sbci	r31, 0xFE	; 254
     9b4:	99 81       	ldd	r25, Y+1	; 0x01
     9b6:	90 83       	st	Z, r25
    ++txBufferIndex;
     9b8:	8f 5f       	subi	r24, 0xFF	; 255
     9ba:	80 93 ce 01 	sts	0x01CE, r24
    // update amount in buffer   
    txBufferLength = txBufferIndex;
     9be:	80 93 cf 01 	sts	0x01CF, r24
     9c2:	05 c0       	rjmp	.+10     	; 0x9ce <_ZN7TwoWire5writeEh+0x52>
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
     9c4:	ce 01       	movw	r24, r28
     9c6:	01 96       	adiw	r24, 0x01	; 1
     9c8:	61 e0       	ldi	r22, 0x01	; 1
     9ca:	0e 94 bf 05 	call	0xb7e	; 0xb7e <twi_transmit>
     9ce:	21 e0       	ldi	r18, 0x01	; 1
     9d0:	30 e0       	ldi	r19, 0x00	; 0
  }
  return 1;
}
     9d2:	c9 01       	movw	r24, r18
     9d4:	0f 90       	pop	r0
     9d6:	cf 91       	pop	r28
     9d8:	df 91       	pop	r29
     9da:	08 95       	ret

000009dc <_ZN7TwoWire15endTransmissionEh>:
//	the bus tenure has been properly ended with a STOP. It
//	is very possible to leave the bus in a hung state if
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
     9dc:	0f 93       	push	r16
     9de:	06 2f       	mov	r16, r22
{
  // transmit buffer (blocking)
  int8_t ret = twi_writeTo(txAddress, txBuffer, txBufferLength, 1, sendStop);
     9e0:	80 91 ad 01 	lds	r24, 0x01AD
     9e4:	6e ea       	ldi	r22, 0xAE	; 174
     9e6:	71 e0       	ldi	r23, 0x01	; 1
     9e8:	40 91 cf 01 	lds	r20, 0x01CF
     9ec:	21 e0       	ldi	r18, 0x01	; 1
     9ee:	0e 94 6a 05 	call	0xad4	; 0xad4 <twi_writeTo>
  // reset tx buffer iterator vars
  txBufferIndex = 0;
     9f2:	10 92 ce 01 	sts	0x01CE, r1
  txBufferLength = 0;
     9f6:	10 92 cf 01 	sts	0x01CF, r1
  // indicate that we are done transmitting
  transmitting = 0;
     9fa:	10 92 d0 01 	sts	0x01D0, r1
  return ret;
}
     9fe:	0f 91       	pop	r16
     a00:	08 95       	ret

00000a02 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
     a02:	61 e0       	ldi	r22, 0x01	; 1
     a04:	0e 94 ee 04 	call	0x9dc	; 0x9dc <_ZN7TwoWire15endTransmissionEh>
}
     a08:	08 95       	ret

00000a0a <_ZN7TwoWire11requestFromEhhh>:
  // clamp to buffer length
  if(quantity > BUFFER_LENGTH){
    quantity = BUFFER_LENGTH;
  }
  // perform blocking read into buffer
  uint8_t read = twi_readFrom(address, rxBuffer, quantity, sendStop);
     a0a:	41 32       	cpi	r20, 0x21	; 33
     a0c:	08 f0       	brcs	.+2      	; 0xa10 <_ZN7TwoWire11requestFromEhhh+0x6>
     a0e:	40 e2       	ldi	r20, 0x20	; 32
     a10:	86 2f       	mov	r24, r22
     a12:	6b e8       	ldi	r22, 0x8B	; 139
     a14:	71 e0       	ldi	r23, 0x01	; 1
     a16:	0e 94 21 05 	call	0xa42	; 0xa42 <twi_readFrom>
  // set rx buffer iterator vars
  rxBufferIndex = 0;
     a1a:	10 92 ab 01 	sts	0x01AB, r1
  rxBufferLength = read;
     a1e:	80 93 ac 01 	sts	0x01AC, r24

  return read;
}
     a22:	08 95       	ret

00000a24 <_ZN7TwoWire11requestFromEii>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
}

uint8_t TwoWire::requestFrom(int address, int quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
     a24:	21 e0       	ldi	r18, 0x01	; 1
     a26:	0e 94 05 05 	call	0xa0a	; 0xa0a <_ZN7TwoWire11requestFromEhhh>
}
     a2a:	08 95       	ret

00000a2c <_ZN7TwoWire5beginEv>:

// Public Methods //////////////////////////////////////////////////////////////

void TwoWire::begin(void)
{
  rxBufferIndex = 0;
     a2c:	10 92 ab 01 	sts	0x01AB, r1
  rxBufferLength = 0;
     a30:	10 92 ac 01 	sts	0x01AC, r1

  txBufferIndex = 0;
     a34:	10 92 ce 01 	sts	0x01CE, r1
  txBufferLength = 0;
     a38:	10 92 cf 01 	sts	0x01CF, r1

  twi_init();
     a3c:	0e 94 6b 07 	call	0xed6	; 0xed6 <twi_init>
}
     a40:	08 95       	ret

00000a42 <twi_readFrom>:
 *          length: number of bytes to read into array
 *          sendStop: Boolean indicating whether to send a stop at the end
 * Output   number of bytes read
 */
uint8_t twi_readFrom(uint8_t address, uint8_t* data, uint8_t length, uint8_t sendStop)
{
     a42:	38 2f       	mov	r19, r24
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
     a44:	41 32       	cpi	r20, 0x21	; 33
     a46:	10 f0       	brcs	.+4      	; 0xa4c <twi_readFrom+0xa>
     a48:	40 e0       	ldi	r20, 0x00	; 0
     a4a:	42 c0       	rjmp	.+132    	; 0xad0 <twi_readFrom+0x8e>
    return 0;
  }

  // wait until twi is ready, become master receiver
  while(TWI_READY != twi_state){
     a4c:	80 91 dd 01 	lds	r24, 0x01DD
     a50:	88 23       	and	r24, r24
     a52:	e1 f7       	brne	.-8      	; 0xa4c <twi_readFrom+0xa>
    continue;
  }
  twi_state = TWI_MRX;
     a54:	91 e0       	ldi	r25, 0x01	; 1
     a56:	90 93 dd 01 	sts	0x01DD, r25
  twi_sendStop = sendStop;
     a5a:	20 93 df 01 	sts	0x01DF, r18
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
     a5e:	8f ef       	ldi	r24, 0xFF	; 255
     a60:	80 93 4a 02 	sts	0x024A, r24

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
     a64:	10 92 05 02 	sts	0x0205, r1
  twi_masterBufferLength = length-1;  // This is not intuitive, read on...
     a68:	41 50       	subi	r20, 0x01	; 1
     a6a:	40 93 06 02 	sts	0x0206, r20
     a6e:	4f 5f       	subi	r20, 0xFF	; 255
  // Therefor we must actually set NACK when the _next_ to last byte is
  // received, causing that NACK to be sent in response to receiving the last
  // expected byte of data.

  // build sla+w, slave device address + w bit
  twi_slarw = TW_READ;
     a70:	90 93 de 01 	sts	0x01DE, r25
  twi_slarw |= address << 1;
     a74:	80 91 de 01 	lds	r24, 0x01DE
     a78:	33 0f       	add	r19, r19
     a7a:	83 2b       	or	r24, r19
     a7c:	80 93 de 01 	sts	0x01DE, r24

  if (true == twi_inRepStart) {
     a80:	80 91 e0 01 	lds	r24, 0x01E0
     a84:	81 30       	cpi	r24, 0x01	; 1
     a86:	41 f4       	brne	.+16     	; 0xa98 <twi_readFrom+0x56>
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent outselves, and that would really confuse things.
    twi_inRepStart = false;			// remember, we're dealing with an ASYNC ISR
     a88:	10 92 e0 01 	sts	0x01E0, r1
    TWDR = twi_slarw;
     a8c:	80 91 de 01 	lds	r24, 0x01DE
     a90:	80 93 bb 00 	sts	0x00BB, r24
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);	// enable INTs, but not START
     a94:	85 ec       	ldi	r24, 0xC5	; 197
     a96:	01 c0       	rjmp	.+2      	; 0xa9a <twi_readFrom+0x58>
  }
  else
    // send start condition
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
     a98:	85 ee       	ldi	r24, 0xE5	; 229
     a9a:	80 93 bc 00 	sts	0x00BC, r24

  // wait for read operation to complete
  while(TWI_MRX == twi_state){
     a9e:	80 91 dd 01 	lds	r24, 0x01DD
     aa2:	81 30       	cpi	r24, 0x01	; 1
     aa4:	e1 f3       	breq	.-8      	; 0xa9e <twi_readFrom+0x5c>
    continue;
  }

  if (twi_masterBufferIndex < length)
     aa6:	80 91 05 02 	lds	r24, 0x0205
     aaa:	84 17       	cp	r24, r20
     aac:	10 f4       	brcc	.+4      	; 0xab2 <twi_readFrom+0x70>
    length = twi_masterBufferIndex;
     aae:	40 91 05 02 	lds	r20, 0x0205
     ab2:	20 e0       	ldi	r18, 0x00	; 0
     ab4:	30 e0       	ldi	r19, 0x00	; 0
     ab6:	0a c0       	rjmp	.+20     	; 0xacc <twi_readFrom+0x8a>

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    data[i] = twi_masterBuffer[i];
     ab8:	fb 01       	movw	r30, r22
     aba:	e2 0f       	add	r30, r18
     abc:	f3 1f       	adc	r31, r19
     abe:	d9 01       	movw	r26, r18
     ac0:	ab 51       	subi	r26, 0x1B	; 27
     ac2:	be 4f       	sbci	r27, 0xFE	; 254
     ac4:	8c 91       	ld	r24, X
     ac6:	80 83       	st	Z, r24
     ac8:	2f 5f       	subi	r18, 0xFF	; 255
     aca:	3f 4f       	sbci	r19, 0xFF	; 255

  if (twi_masterBufferIndex < length)
    length = twi_masterBufferIndex;

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
     acc:	24 17       	cp	r18, r20
     ace:	a0 f3       	brcs	.-24     	; 0xab8 <twi_readFrom+0x76>
    data[i] = twi_masterBuffer[i];
  }
	
  return length;
}
     ad0:	84 2f       	mov	r24, r20
     ad2:	08 95       	ret

00000ad4 <twi_writeTo>:
 *          2 .. address send, NACK received
 *          3 .. data send, NACK received
 *          4 .. other twi error (lost bus arbitration, bus error, ..)
 */
uint8_t twi_writeTo(uint8_t address, uint8_t* data, uint8_t length, uint8_t wait, uint8_t sendStop)
{
     ad4:	0f 93       	push	r16
     ad6:	1f 93       	push	r17
     ad8:	58 2f       	mov	r21, r24
     ada:	12 2f       	mov	r17, r18
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
     adc:	41 32       	cpi	r20, 0x21	; 33
     ade:	10 f0       	brcs	.+4      	; 0xae4 <twi_writeTo+0x10>
     ae0:	81 e0       	ldi	r24, 0x01	; 1
     ae2:	4a c0       	rjmp	.+148    	; 0xb78 <twi_writeTo+0xa4>
    return 1;
  }

  // wait until twi is ready, become master transmitter
  while(TWI_READY != twi_state){
     ae4:	80 91 dd 01 	lds	r24, 0x01DD
     ae8:	88 23       	and	r24, r24
     aea:	e1 f7       	brne	.-8      	; 0xae4 <twi_writeTo+0x10>
    continue;
  }
  twi_state = TWI_MTX;
     aec:	82 e0       	ldi	r24, 0x02	; 2
     aee:	80 93 dd 01 	sts	0x01DD, r24
  twi_sendStop = sendStop;
     af2:	00 93 df 01 	sts	0x01DF, r16
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
     af6:	8f ef       	ldi	r24, 0xFF	; 255
     af8:	80 93 4a 02 	sts	0x024A, r24

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
     afc:	10 92 05 02 	sts	0x0205, r1
  twi_masterBufferLength = length;
     b00:	40 93 06 02 	sts	0x0206, r20
     b04:	a5 ee       	ldi	r26, 0xE5	; 229
     b06:	b1 e0       	ldi	r27, 0x01	; 1
     b08:	fb 01       	movw	r30, r22
     b0a:	02 c0       	rjmp	.+4      	; 0xb10 <twi_writeTo+0x3c>
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
    twi_masterBuffer[i] = data[i];
     b0c:	81 91       	ld	r24, Z+
     b0e:	8d 93       	st	X+, r24
  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
  twi_masterBufferLength = length;
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
     b10:	8e 2f       	mov	r24, r30
     b12:	86 1b       	sub	r24, r22
     b14:	84 17       	cp	r24, r20
     b16:	d0 f3       	brcs	.-12     	; 0xb0c <twi_writeTo+0x38>
    twi_masterBuffer[i] = data[i];
  }
  
  // build sla+w, slave device address + w bit
  twi_slarw = TW_WRITE;
     b18:	10 92 de 01 	sts	0x01DE, r1
  twi_slarw |= address << 1;
     b1c:	80 91 de 01 	lds	r24, 0x01DE
     b20:	55 0f       	add	r21, r21
     b22:	85 2b       	or	r24, r21
     b24:	80 93 de 01 	sts	0x01DE, r24
  
  // if we're in a repeated start, then we've already sent the START
  // in the ISR. Don't do it again.
  //
  if (true == twi_inRepStart) {
     b28:	80 91 e0 01 	lds	r24, 0x01E0
     b2c:	81 30       	cpi	r24, 0x01	; 1
     b2e:	41 f4       	brne	.+16     	; 0xb40 <twi_writeTo+0x6c>
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent outselves, and that would really confuse things.
    twi_inRepStart = false;			// remember, we're dealing with an ASYNC ISR
     b30:	10 92 e0 01 	sts	0x01E0, r1
    TWDR = twi_slarw;				
     b34:	80 91 de 01 	lds	r24, 0x01DE
     b38:	80 93 bb 00 	sts	0x00BB, r24
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);	// enable INTs, but not START
     b3c:	85 ec       	ldi	r24, 0xC5	; 197
     b3e:	01 c0       	rjmp	.+2      	; 0xb42 <twi_writeTo+0x6e>
  }
  else
    // send start condition
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA);	// enable INTs
     b40:	85 ee       	ldi	r24, 0xE5	; 229
     b42:	80 93 bc 00 	sts	0x00BC, r24

  // wait for write operation to complete
  while(wait && (TWI_MTX == twi_state)){
     b46:	11 23       	and	r17, r17
     b48:	21 f0       	breq	.+8      	; 0xb52 <twi_writeTo+0x7e>
     b4a:	80 91 dd 01 	lds	r24, 0x01DD
     b4e:	82 30       	cpi	r24, 0x02	; 2
     b50:	e1 f3       	breq	.-8      	; 0xb4a <twi_writeTo+0x76>
    continue;
  }
  
  if (twi_error == 0xFF)
     b52:	80 91 4a 02 	lds	r24, 0x024A
     b56:	8f 3f       	cpi	r24, 0xFF	; 255
     b58:	11 f4       	brne	.+4      	; 0xb5e <twi_writeTo+0x8a>
     b5a:	80 e0       	ldi	r24, 0x00	; 0
     b5c:	0d c0       	rjmp	.+26     	; 0xb78 <twi_writeTo+0xa4>
    return 0;	// success
  else if (twi_error == TW_MT_SLA_NACK)
     b5e:	80 91 4a 02 	lds	r24, 0x024A
     b62:	80 32       	cpi	r24, 0x20	; 32
     b64:	11 f4       	brne	.+4      	; 0xb6a <twi_writeTo+0x96>
     b66:	82 e0       	ldi	r24, 0x02	; 2
     b68:	07 c0       	rjmp	.+14     	; 0xb78 <twi_writeTo+0xa4>
    return 2;	// error: address send, nack received
  else if (twi_error == TW_MT_DATA_NACK)
     b6a:	80 91 4a 02 	lds	r24, 0x024A
     b6e:	80 33       	cpi	r24, 0x30	; 48
     b70:	11 f0       	breq	.+4      	; 0xb76 <twi_writeTo+0xa2>
     b72:	84 e0       	ldi	r24, 0x04	; 4
     b74:	01 c0       	rjmp	.+2      	; 0xb78 <twi_writeTo+0xa4>
     b76:	83 e0       	ldi	r24, 0x03	; 3
    return 3;	// error: data send, nack received
  else
    return 4;	// other twi error
}
     b78:	1f 91       	pop	r17
     b7a:	0f 91       	pop	r16
     b7c:	08 95       	ret

00000b7e <twi_transmit>:
 * Output   1 length too long for buffer
 *          2 not slave transmitter
 *          0 ok
 */
uint8_t twi_transmit(const uint8_t* data, uint8_t length)
{
     b7e:	48 2f       	mov	r20, r24
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
     b80:	61 32       	cpi	r22, 0x21	; 33
     b82:	10 f0       	brcs	.+4      	; 0xb88 <twi_transmit+0xa>
     b84:	81 e0       	ldi	r24, 0x01	; 1
     b86:	08 95       	ret
    return 1;
  }
  
  // ensure we are currently a slave transmitter
  if(TWI_STX != twi_state){
     b88:	80 91 dd 01 	lds	r24, 0x01DD
     b8c:	84 30       	cpi	r24, 0x04	; 4
     b8e:	11 f0       	breq	.+4      	; 0xb94 <twi_transmit+0x16>
     b90:	82 e0       	ldi	r24, 0x02	; 2
     b92:	08 95       	ret
    return 2;
  }
  
  // set length and copy data into tx buffer
  twi_txBufferLength = length;
     b94:	60 93 28 02 	sts	0x0228, r22
     b98:	a7 e0       	ldi	r26, 0x07	; 7
     b9a:	b2 e0       	ldi	r27, 0x02	; 2
     b9c:	84 2f       	mov	r24, r20
     b9e:	9c 01       	movw	r18, r24
     ba0:	f9 01       	movw	r30, r18
     ba2:	02 c0       	rjmp	.+4      	; 0xba8 <twi_transmit+0x2a>
  for(i = 0; i < length; ++i){
    twi_txBuffer[i] = data[i];
     ba4:	81 91       	ld	r24, Z+
     ba6:	8d 93       	st	X+, r24
    return 2;
  }
  
  // set length and copy data into tx buffer
  twi_txBufferLength = length;
  for(i = 0; i < length; ++i){
     ba8:	8e 2f       	mov	r24, r30
     baa:	84 1b       	sub	r24, r20
     bac:	86 17       	cp	r24, r22
     bae:	d0 f3       	brcs	.-12     	; 0xba4 <twi_transmit+0x26>
     bb0:	80 e0       	ldi	r24, 0x00	; 0
    twi_txBuffer[i] = data[i];
  }
  
  return 0;
}
     bb2:	08 95       	ret

00000bb4 <__vector_24>:
  // update twi state
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
     bb4:	1f 92       	push	r1
     bb6:	0f 92       	push	r0
     bb8:	0f b6       	in	r0, 0x3f	; 63
     bba:	0f 92       	push	r0
     bbc:	11 24       	eor	r1, r1
     bbe:	2f 93       	push	r18
     bc0:	3f 93       	push	r19
     bc2:	4f 93       	push	r20
     bc4:	5f 93       	push	r21
     bc6:	6f 93       	push	r22
     bc8:	7f 93       	push	r23
     bca:	8f 93       	push	r24
     bcc:	9f 93       	push	r25
     bce:	af 93       	push	r26
     bd0:	bf 93       	push	r27
     bd2:	ef 93       	push	r30
     bd4:	ff 93       	push	r31
  switch(TW_STATUS){
     bd6:	80 91 b9 00 	lds	r24, 0x00B9
     bda:	90 e0       	ldi	r25, 0x00	; 0
     bdc:	88 7f       	andi	r24, 0xF8	; 248
     bde:	90 70       	andi	r25, 0x00	; 0
     be0:	80 36       	cpi	r24, 0x60	; 96
     be2:	91 05       	cpc	r25, r1
     be4:	09 f4       	brne	.+2      	; 0xbe8 <__vector_24+0x34>
     be6:	f2 c0       	rjmp	.+484    	; 0xdcc <__vector_24+0x218>
     be8:	81 36       	cpi	r24, 0x61	; 97
     bea:	91 05       	cpc	r25, r1
     bec:	cc f5       	brge	.+114    	; 0xc60 <__vector_24+0xac>
     bee:	88 32       	cpi	r24, 0x28	; 40
     bf0:	91 05       	cpc	r25, r1
     bf2:	09 f4       	brne	.+2      	; 0xbf6 <__vector_24+0x42>
     bf4:	7b c0       	rjmp	.+246    	; 0xcec <__vector_24+0x138>
     bf6:	89 32       	cpi	r24, 0x29	; 41
     bf8:	91 05       	cpc	r25, r1
     bfa:	b4 f4       	brge	.+44     	; 0xc28 <__vector_24+0x74>
     bfc:	80 31       	cpi	r24, 0x10	; 16
     bfe:	91 05       	cpc	r25, r1
     c00:	09 f4       	brne	.+2      	; 0xc04 <__vector_24+0x50>
     c02:	6f c0       	rjmp	.+222    	; 0xce2 <__vector_24+0x12e>
     c04:	81 31       	cpi	r24, 0x11	; 17
     c06:	91 05       	cpc	r25, r1
     c08:	3c f4       	brge	.+14     	; 0xc18 <__vector_24+0x64>
     c0a:	00 97       	sbiw	r24, 0x00	; 0
     c0c:	09 f4       	brne	.+2      	; 0xc10 <__vector_24+0x5c>
     c0e:	47 c1       	rjmp	.+654    	; 0xe9e <__vector_24+0x2ea>
     c10:	08 97       	sbiw	r24, 0x08	; 8
     c12:	09 f0       	breq	.+2      	; 0xc16 <__vector_24+0x62>
     c14:	4f c1       	rjmp	.+670    	; 0xeb4 <__vector_24+0x300>
     c16:	65 c0       	rjmp	.+202    	; 0xce2 <__vector_24+0x12e>
     c18:	88 31       	cpi	r24, 0x18	; 24
     c1a:	91 05       	cpc	r25, r1
     c1c:	09 f4       	brne	.+2      	; 0xc20 <__vector_24+0x6c>
     c1e:	66 c0       	rjmp	.+204    	; 0xcec <__vector_24+0x138>
     c20:	80 97       	sbiw	r24, 0x20	; 32
     c22:	09 f0       	breq	.+2      	; 0xc26 <__vector_24+0x72>
     c24:	47 c1       	rjmp	.+654    	; 0xeb4 <__vector_24+0x300>
     c26:	82 c0       	rjmp	.+260    	; 0xd2c <__vector_24+0x178>
     c28:	80 34       	cpi	r24, 0x40	; 64
     c2a:	91 05       	cpc	r25, r1
     c2c:	09 f4       	brne	.+2      	; 0xc30 <__vector_24+0x7c>
     c2e:	a4 c0       	rjmp	.+328    	; 0xd78 <__vector_24+0x1c4>
     c30:	81 34       	cpi	r24, 0x41	; 65
     c32:	91 05       	cpc	r25, r1
     c34:	44 f4       	brge	.+16     	; 0xc46 <__vector_24+0x92>
     c36:	80 33       	cpi	r24, 0x30	; 48
     c38:	91 05       	cpc	r25, r1
     c3a:	09 f4       	brne	.+2      	; 0xc3e <__vector_24+0x8a>
     c3c:	82 c0       	rjmp	.+260    	; 0xd42 <__vector_24+0x18e>
     c3e:	c8 97       	sbiw	r24, 0x38	; 56
     c40:	09 f0       	breq	.+2      	; 0xc44 <__vector_24+0x90>
     c42:	38 c1       	rjmp	.+624    	; 0xeb4 <__vector_24+0x300>
     c44:	89 c0       	rjmp	.+274    	; 0xd58 <__vector_24+0x1a4>
     c46:	80 35       	cpi	r24, 0x50	; 80
     c48:	91 05       	cpc	r25, r1
     c4a:	09 f4       	brne	.+2      	; 0xc4e <__vector_24+0x9a>
     c4c:	89 c0       	rjmp	.+274    	; 0xd60 <__vector_24+0x1ac>
     c4e:	88 35       	cpi	r24, 0x58	; 88
     c50:	91 05       	cpc	r25, r1
     c52:	09 f4       	brne	.+2      	; 0xc56 <__vector_24+0xa2>
     c54:	96 c0       	rjmp	.+300    	; 0xd82 <__vector_24+0x1ce>
     c56:	88 34       	cpi	r24, 0x48	; 72
     c58:	91 05       	cpc	r25, r1
     c5a:	09 f0       	breq	.+2      	; 0xc5e <__vector_24+0xaa>
     c5c:	2b c1       	rjmp	.+598    	; 0xeb4 <__vector_24+0x300>
     c5e:	ae c0       	rjmp	.+348    	; 0xdbc <__vector_24+0x208>
     c60:	88 39       	cpi	r24, 0x98	; 152
     c62:	91 05       	cpc	r25, r1
     c64:	09 f4       	brne	.+2      	; 0xc68 <__vector_24+0xb4>
     c66:	13 c1       	rjmp	.+550    	; 0xe8e <__vector_24+0x2da>
     c68:	89 39       	cpi	r24, 0x99	; 153
     c6a:	91 05       	cpc	r25, r1
     c6c:	ec f4       	brge	.+58     	; 0xca8 <__vector_24+0xf4>
     c6e:	88 37       	cpi	r24, 0x78	; 120
     c70:	91 05       	cpc	r25, r1
     c72:	09 f4       	brne	.+2      	; 0xc76 <__vector_24+0xc2>
     c74:	ab c0       	rjmp	.+342    	; 0xdcc <__vector_24+0x218>
     c76:	89 37       	cpi	r24, 0x79	; 121
     c78:	91 05       	cpc	r25, r1
     c7a:	4c f4       	brge	.+18     	; 0xc8e <__vector_24+0xda>
     c7c:	88 36       	cpi	r24, 0x68	; 104
     c7e:	91 05       	cpc	r25, r1
     c80:	09 f4       	brne	.+2      	; 0xc84 <__vector_24+0xd0>
     c82:	a4 c0       	rjmp	.+328    	; 0xdcc <__vector_24+0x218>
     c84:	80 37       	cpi	r24, 0x70	; 112
     c86:	91 05       	cpc	r25, r1
     c88:	09 f0       	breq	.+2      	; 0xc8c <__vector_24+0xd8>
     c8a:	14 c1       	rjmp	.+552    	; 0xeb4 <__vector_24+0x300>
     c8c:	9f c0       	rjmp	.+318    	; 0xdcc <__vector_24+0x218>
     c8e:	88 38       	cpi	r24, 0x88	; 136
     c90:	91 05       	cpc	r25, r1
     c92:	09 f4       	brne	.+2      	; 0xc96 <__vector_24+0xe2>
     c94:	fc c0       	rjmp	.+504    	; 0xe8e <__vector_24+0x2da>
     c96:	80 39       	cpi	r24, 0x90	; 144
     c98:	91 05       	cpc	r25, r1
     c9a:	09 f4       	brne	.+2      	; 0xc9e <__vector_24+0xea>
     c9c:	9d c0       	rjmp	.+314    	; 0xdd8 <__vector_24+0x224>
     c9e:	80 38       	cpi	r24, 0x80	; 128
     ca0:	91 05       	cpc	r25, r1
     ca2:	09 f0       	breq	.+2      	; 0xca6 <__vector_24+0xf2>
     ca4:	07 c1       	rjmp	.+526    	; 0xeb4 <__vector_24+0x300>
     ca6:	98 c0       	rjmp	.+304    	; 0xdd8 <__vector_24+0x224>
     ca8:	80 3b       	cpi	r24, 0xB0	; 176
     caa:	91 05       	cpc	r25, r1
     cac:	09 f4       	brne	.+2      	; 0xcb0 <__vector_24+0xfc>
     cae:	c6 c0       	rjmp	.+396    	; 0xe3c <__vector_24+0x288>
     cb0:	81 3b       	cpi	r24, 0xB1	; 177
     cb2:	91 05       	cpc	r25, r1
     cb4:	4c f4       	brge	.+18     	; 0xcc8 <__vector_24+0x114>
     cb6:	80 3a       	cpi	r24, 0xA0	; 160
     cb8:	91 05       	cpc	r25, r1
     cba:	09 f4       	brne	.+2      	; 0xcbe <__vector_24+0x10a>
     cbc:	9f c0       	rjmp	.+318    	; 0xdfc <__vector_24+0x248>
     cbe:	88 3a       	cpi	r24, 0xA8	; 168
     cc0:	91 05       	cpc	r25, r1
     cc2:	09 f0       	breq	.+2      	; 0xcc6 <__vector_24+0x112>
     cc4:	f7 c0       	rjmp	.+494    	; 0xeb4 <__vector_24+0x300>
     cc6:	ba c0       	rjmp	.+372    	; 0xe3c <__vector_24+0x288>
     cc8:	80 3c       	cpi	r24, 0xC0	; 192
     cca:	91 05       	cpc	r25, r1
     ccc:	09 f4       	brne	.+2      	; 0xcd0 <__vector_24+0x11c>
     cce:	e3 c0       	rjmp	.+454    	; 0xe96 <__vector_24+0x2e2>
     cd0:	88 3c       	cpi	r24, 0xC8	; 200
     cd2:	91 05       	cpc	r25, r1
     cd4:	09 f4       	brne	.+2      	; 0xcd8 <__vector_24+0x124>
     cd6:	df c0       	rjmp	.+446    	; 0xe96 <__vector_24+0x2e2>
     cd8:	88 3b       	cpi	r24, 0xB8	; 184
     cda:	91 05       	cpc	r25, r1
     cdc:	09 f0       	breq	.+2      	; 0xce0 <__vector_24+0x12c>
     cde:	ea c0       	rjmp	.+468    	; 0xeb4 <__vector_24+0x300>
     ce0:	c2 c0       	rjmp	.+388    	; 0xe66 <__vector_24+0x2b2>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
     ce2:	80 91 de 01 	lds	r24, 0x01DE
     ce6:	80 93 bb 00 	sts	0x00BB, r24
     cea:	cf c0       	rjmp	.+414    	; 0xe8a <__vector_24+0x2d6>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
     cec:	90 91 05 02 	lds	r25, 0x0205
     cf0:	80 91 06 02 	lds	r24, 0x0206
     cf4:	98 17       	cp	r25, r24
     cf6:	68 f4       	brcc	.+26     	; 0xd12 <__vector_24+0x15e>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
     cf8:	90 91 05 02 	lds	r25, 0x0205
     cfc:	e9 2f       	mov	r30, r25
     cfe:	f0 e0       	ldi	r31, 0x00	; 0
     d00:	eb 51       	subi	r30, 0x1B	; 27
     d02:	fe 4f       	sbci	r31, 0xFE	; 254
     d04:	80 81       	ld	r24, Z
     d06:	80 93 bb 00 	sts	0x00BB, r24
     d0a:	9f 5f       	subi	r25, 0xFF	; 255
     d0c:	90 93 05 02 	sts	0x0205, r25
     d10:	bc c0       	rjmp	.+376    	; 0xe8a <__vector_24+0x2d6>
        twi_reply(1);
      }else{
	if (twi_sendStop)
     d12:	80 91 df 01 	lds	r24, 0x01DF
     d16:	88 23       	and	r24, r24
     d18:	09 f4       	brne	.+2      	; 0xd1c <__vector_24+0x168>
     d1a:	4b c0       	rjmp	.+150    	; 0xdb2 <__vector_24+0x1fe>
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
     d1c:	85 ed       	ldi	r24, 0xD5	; 213
     d1e:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
     d22:	80 91 bc 00 	lds	r24, 0x00BC
     d26:	84 fd       	sbrc	r24, 4
     d28:	fc cf       	rjmp	.-8      	; 0xd22 <__vector_24+0x16e>
     d2a:	c2 c0       	rjmp	.+388    	; 0xeb0 <__vector_24+0x2fc>
	  twi_state = TWI_READY;
	}
      }
      break;
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
     d2c:	80 e2       	ldi	r24, 0x20	; 32
     d2e:	80 93 4a 02 	sts	0x024A, r24
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
     d32:	85 ed       	ldi	r24, 0xD5	; 213
     d34:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
     d38:	80 91 bc 00 	lds	r24, 0x00BC
     d3c:	84 fd       	sbrc	r24, 4
     d3e:	fc cf       	rjmp	.-8      	; 0xd38 <__vector_24+0x184>
     d40:	b7 c0       	rjmp	.+366    	; 0xeb0 <__vector_24+0x2fc>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
     d42:	80 e3       	ldi	r24, 0x30	; 48
     d44:	80 93 4a 02 	sts	0x024A, r24
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
     d48:	85 ed       	ldi	r24, 0xD5	; 213
     d4a:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
     d4e:	80 91 bc 00 	lds	r24, 0x00BC
     d52:	84 fd       	sbrc	r24, 4
     d54:	fc cf       	rjmp	.-8      	; 0xd4e <__vector_24+0x19a>
     d56:	ac c0       	rjmp	.+344    	; 0xeb0 <__vector_24+0x2fc>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
     d58:	88 e3       	ldi	r24, 0x38	; 56
     d5a:	80 93 4a 02 	sts	0x024A, r24
     d5e:	9b c0       	rjmp	.+310    	; 0xe96 <__vector_24+0x2e2>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
     d60:	80 91 05 02 	lds	r24, 0x0205
     d64:	90 91 bb 00 	lds	r25, 0x00BB
     d68:	e8 2f       	mov	r30, r24
     d6a:	f0 e0       	ldi	r31, 0x00	; 0
     d6c:	eb 51       	subi	r30, 0x1B	; 27
     d6e:	fe 4f       	sbci	r31, 0xFE	; 254
     d70:	90 83       	st	Z, r25
     d72:	8f 5f       	subi	r24, 0xFF	; 255
     d74:	80 93 05 02 	sts	0x0205, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
     d78:	90 91 05 02 	lds	r25, 0x0205
     d7c:	80 91 06 02 	lds	r24, 0x0206
     d80:	82 c0       	rjmp	.+260    	; 0xe86 <__vector_24+0x2d2>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
     d82:	80 91 05 02 	lds	r24, 0x0205
     d86:	90 91 bb 00 	lds	r25, 0x00BB
     d8a:	e8 2f       	mov	r30, r24
     d8c:	f0 e0       	ldi	r31, 0x00	; 0
     d8e:	eb 51       	subi	r30, 0x1B	; 27
     d90:	fe 4f       	sbci	r31, 0xFE	; 254
     d92:	90 83       	st	Z, r25
     d94:	8f 5f       	subi	r24, 0xFF	; 255
     d96:	80 93 05 02 	sts	0x0205, r24
	if (twi_sendStop)
     d9a:	80 91 df 01 	lds	r24, 0x01DF
     d9e:	88 23       	and	r24, r24
     da0:	41 f0       	breq	.+16     	; 0xdb2 <__vector_24+0x1fe>
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
     da2:	85 ed       	ldi	r24, 0xD5	; 213
     da4:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
     da8:	80 91 bc 00 	lds	r24, 0x00BC
     dac:	84 fd       	sbrc	r24, 4
     dae:	fc cf       	rjmp	.-8      	; 0xda8 <__vector_24+0x1f4>
     db0:	7f c0       	rjmp	.+254    	; 0xeb0 <__vector_24+0x2fc>
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
	if (twi_sendStop)
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
     db2:	81 e0       	ldi	r24, 0x01	; 1
     db4:	80 93 e0 01 	sts	0x01E0, r24
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
     db8:	84 ea       	ldi	r24, 0xA4	; 164
     dba:	6e c0       	rjmp	.+220    	; 0xe98 <__vector_24+0x2e4>
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
     dbc:	85 ed       	ldi	r24, 0xD5	; 213
     dbe:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
     dc2:	80 91 bc 00 	lds	r24, 0x00BC
     dc6:	84 fd       	sbrc	r24, 4
     dc8:	fc cf       	rjmp	.-8      	; 0xdc2 <__vector_24+0x20e>
     dca:	72 c0       	rjmp	.+228    	; 0xeb0 <__vector_24+0x2fc>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
     dcc:	83 e0       	ldi	r24, 0x03	; 3
     dce:	80 93 dd 01 	sts	0x01DD, r24
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
     dd2:	10 92 49 02 	sts	0x0249, r1
     dd6:	59 c0       	rjmp	.+178    	; 0xe8a <__vector_24+0x2d6>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
     dd8:	80 91 49 02 	lds	r24, 0x0249
     ddc:	80 32       	cpi	r24, 0x20	; 32
     dde:	08 f0       	brcs	.+2      	; 0xde2 <__vector_24+0x22e>
     de0:	56 c0       	rjmp	.+172    	; 0xe8e <__vector_24+0x2da>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
     de2:	80 91 49 02 	lds	r24, 0x0249
     de6:	90 91 bb 00 	lds	r25, 0x00BB
     dea:	e8 2f       	mov	r30, r24
     dec:	f0 e0       	ldi	r31, 0x00	; 0
     dee:	e7 5d       	subi	r30, 0xD7	; 215
     df0:	fd 4f       	sbci	r31, 0xFD	; 253
     df2:	90 83       	st	Z, r25
     df4:	8f 5f       	subi	r24, 0xFF	; 255
     df6:	80 93 49 02 	sts	0x0249, r24
     dfa:	47 c0       	rjmp	.+142    	; 0xe8a <__vector_24+0x2d6>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
     dfc:	80 91 49 02 	lds	r24, 0x0249
     e00:	80 32       	cpi	r24, 0x20	; 32
     e02:	30 f4       	brcc	.+12     	; 0xe10 <__vector_24+0x25c>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
     e04:	e0 91 49 02 	lds	r30, 0x0249
     e08:	f0 e0       	ldi	r31, 0x00	; 0
     e0a:	e7 5d       	subi	r30, 0xD7	; 215
     e0c:	fd 4f       	sbci	r31, 0xFD	; 253
     e0e:	10 82       	st	Z, r1
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
     e10:	85 ed       	ldi	r24, 0xD5	; 213
     e12:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
     e16:	80 91 bc 00 	lds	r24, 0x00BC
     e1a:	84 fd       	sbrc	r24, 4
     e1c:	fc cf       	rjmp	.-8      	; 0xe16 <__vector_24+0x262>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
     e1e:	10 92 dd 01 	sts	0x01DD, r1
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
      }
      // sends ack and stops interface for clock stretching
      twi_stop();
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
     e22:	60 91 49 02 	lds	r22, 0x0249
     e26:	e0 91 e3 01 	lds	r30, 0x01E3
     e2a:	f0 91 e4 01 	lds	r31, 0x01E4
     e2e:	89 e2       	ldi	r24, 0x29	; 41
     e30:	92 e0       	ldi	r25, 0x02	; 2
     e32:	70 e0       	ldi	r23, 0x00	; 0
     e34:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
     e36:	10 92 49 02 	sts	0x0249, r1
     e3a:	2d c0       	rjmp	.+90     	; 0xe96 <__vector_24+0x2e2>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
     e3c:	84 e0       	ldi	r24, 0x04	; 4
     e3e:	80 93 dd 01 	sts	0x01DD, r24
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
     e42:	10 92 27 02 	sts	0x0227, r1
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
     e46:	10 92 28 02 	sts	0x0228, r1
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
     e4a:	e0 91 e1 01 	lds	r30, 0x01E1
     e4e:	f0 91 e2 01 	lds	r31, 0x01E2
     e52:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
     e54:	80 91 28 02 	lds	r24, 0x0228
     e58:	88 23       	and	r24, r24
     e5a:	29 f4       	brne	.+10     	; 0xe66 <__vector_24+0x2b2>
        twi_txBufferLength = 1;
     e5c:	81 e0       	ldi	r24, 0x01	; 1
     e5e:	80 93 28 02 	sts	0x0228, r24
        twi_txBuffer[0] = 0x00;
     e62:	10 92 07 02 	sts	0x0207, r1
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
     e66:	90 91 27 02 	lds	r25, 0x0227
     e6a:	e9 2f       	mov	r30, r25
     e6c:	f0 e0       	ldi	r31, 0x00	; 0
     e6e:	e9 5f       	subi	r30, 0xF9	; 249
     e70:	fd 4f       	sbci	r31, 0xFD	; 253
     e72:	80 81       	ld	r24, Z
     e74:	80 93 bb 00 	sts	0x00BB, r24
     e78:	9f 5f       	subi	r25, 0xFF	; 255
     e7a:	90 93 27 02 	sts	0x0227, r25
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
     e7e:	90 91 27 02 	lds	r25, 0x0227
     e82:	80 91 28 02 	lds	r24, 0x0228
     e86:	98 17       	cp	r25, r24
     e88:	10 f4       	brcc	.+4      	; 0xe8e <__vector_24+0x2da>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
     e8a:	85 ec       	ldi	r24, 0xC5	; 197
     e8c:	01 c0       	rjmp	.+2      	; 0xe90 <__vector_24+0x2dc>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
     e8e:	85 e8       	ldi	r24, 0x85	; 133
     e90:	80 93 bc 00 	sts	0x00BC, r24
     e94:	0f c0       	rjmp	.+30     	; 0xeb4 <__vector_24+0x300>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
     e96:	85 ec       	ldi	r24, 0xC5	; 197
     e98:	80 93 bc 00 	sts	0x00BC, r24
     e9c:	09 c0       	rjmp	.+18     	; 0xeb0 <__vector_24+0x2fc>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
     e9e:	10 92 4a 02 	sts	0x024A, r1
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
     ea2:	85 ed       	ldi	r24, 0xD5	; 213
     ea4:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
     ea8:	80 91 bc 00 	lds	r24, 0x00BC
     eac:	84 fd       	sbrc	r24, 4
     eae:	fc cf       	rjmp	.-8      	; 0xea8 <__vector_24+0x2f4>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
     eb0:	10 92 dd 01 	sts	0x01DD, r1
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
      break;
  }
}
     eb4:	ff 91       	pop	r31
     eb6:	ef 91       	pop	r30
     eb8:	bf 91       	pop	r27
     eba:	af 91       	pop	r26
     ebc:	9f 91       	pop	r25
     ebe:	8f 91       	pop	r24
     ec0:	7f 91       	pop	r23
     ec2:	6f 91       	pop	r22
     ec4:	5f 91       	pop	r21
     ec6:	4f 91       	pop	r20
     ec8:	3f 91       	pop	r19
     eca:	2f 91       	pop	r18
     ecc:	0f 90       	pop	r0
     ece:	0f be       	out	0x3f, r0	; 63
     ed0:	0f 90       	pop	r0
     ed2:	1f 90       	pop	r1
     ed4:	18 95       	reti

00000ed6 <twi_init>:
 * Output   none
 */
void twi_init(void)
{
  // initialize state
  twi_state = TWI_READY;
     ed6:	10 92 dd 01 	sts	0x01DD, r1
  twi_sendStop = true;		// default value
     eda:	81 e0       	ldi	r24, 0x01	; 1
     edc:	80 93 df 01 	sts	0x01DF, r24
  twi_inRepStart = false;
     ee0:	10 92 e0 01 	sts	0x01E0, r1
  
  // activate internal pullups for twi.
  digitalWrite(SDA, 1);
     ee4:	82 e1       	ldi	r24, 0x12	; 18
     ee6:	61 e0       	ldi	r22, 0x01	; 1
     ee8:	0e 94 65 08 	call	0x10ca	; 0x10ca <digitalWrite>
  digitalWrite(SCL, 1);
     eec:	83 e1       	ldi	r24, 0x13	; 19
     eee:	61 e0       	ldi	r22, 0x01	; 1
     ef0:	0e 94 65 08 	call	0x10ca	; 0x10ca <digitalWrite>

  // initialize twi prescaler and bit rate
  cbi(TWSR, TWPS0);
     ef4:	e9 eb       	ldi	r30, 0xB9	; 185
     ef6:	f0 e0       	ldi	r31, 0x00	; 0
     ef8:	80 81       	ld	r24, Z
     efa:	8e 7f       	andi	r24, 0xFE	; 254
     efc:	80 83       	st	Z, r24
  cbi(TWSR, TWPS1);
     efe:	80 81       	ld	r24, Z
     f00:	8d 7f       	andi	r24, 0xFD	; 253
     f02:	80 83       	st	Z, r24
  TWBR = ((F_CPU / TWI_FREQ) - 16) / 2;
     f04:	88 e4       	ldi	r24, 0x48	; 72
     f06:	80 93 b8 00 	sts	0x00B8, r24
  SCL Frequency = CPU Clock Frequency / (16 + (2 * TWBR))
  note: TWBR should be 10 or higher for master mode
  It is 72 for a 16mhz Wiring board with 100kHz TWI */

  // enable twi module, acks, and twi interrupt
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA);
     f0a:	85 e4       	ldi	r24, 0x45	; 69
     f0c:	80 93 bc 00 	sts	0x00BC, r24
}
     f10:	08 95       	ret

00000f12 <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
     f12:	1f 92       	push	r1
     f14:	0f 92       	push	r0
     f16:	0f b6       	in	r0, 0x3f	; 63
     f18:	0f 92       	push	r0
     f1a:	11 24       	eor	r1, r1
     f1c:	2f 93       	push	r18
     f1e:	3f 93       	push	r19
     f20:	8f 93       	push	r24
     f22:	9f 93       	push	r25
     f24:	af 93       	push	r26
     f26:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
     f28:	80 91 4f 02 	lds	r24, 0x024F
     f2c:	90 91 50 02 	lds	r25, 0x0250
     f30:	a0 91 51 02 	lds	r26, 0x0251
     f34:	b0 91 52 02 	lds	r27, 0x0252
	unsigned char f = timer0_fract;
     f38:	30 91 53 02 	lds	r19, 0x0253

	m += MILLIS_INC;
     f3c:	01 96       	adiw	r24, 0x01	; 1
     f3e:	a1 1d       	adc	r26, r1
     f40:	b1 1d       	adc	r27, r1
	f += FRACT_INC;
     f42:	23 2f       	mov	r18, r19
     f44:	2d 5f       	subi	r18, 0xFD	; 253
	if (f >= FRACT_MAX) {
     f46:	2d 37       	cpi	r18, 0x7D	; 125
     f48:	20 f0       	brcs	.+8      	; 0xf52 <__vector_16+0x40>
		f -= FRACT_MAX;
     f4a:	2d 57       	subi	r18, 0x7D	; 125
		m += 1;
     f4c:	01 96       	adiw	r24, 0x01	; 1
     f4e:	a1 1d       	adc	r26, r1
     f50:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
     f52:	20 93 53 02 	sts	0x0253, r18
	timer0_millis = m;
     f56:	80 93 4f 02 	sts	0x024F, r24
     f5a:	90 93 50 02 	sts	0x0250, r25
     f5e:	a0 93 51 02 	sts	0x0251, r26
     f62:	b0 93 52 02 	sts	0x0252, r27
	timer0_overflow_count++;
     f66:	80 91 4b 02 	lds	r24, 0x024B
     f6a:	90 91 4c 02 	lds	r25, 0x024C
     f6e:	a0 91 4d 02 	lds	r26, 0x024D
     f72:	b0 91 4e 02 	lds	r27, 0x024E
     f76:	01 96       	adiw	r24, 0x01	; 1
     f78:	a1 1d       	adc	r26, r1
     f7a:	b1 1d       	adc	r27, r1
     f7c:	80 93 4b 02 	sts	0x024B, r24
     f80:	90 93 4c 02 	sts	0x024C, r25
     f84:	a0 93 4d 02 	sts	0x024D, r26
     f88:	b0 93 4e 02 	sts	0x024E, r27
}
     f8c:	bf 91       	pop	r27
     f8e:	af 91       	pop	r26
     f90:	9f 91       	pop	r25
     f92:	8f 91       	pop	r24
     f94:	3f 91       	pop	r19
     f96:	2f 91       	pop	r18
     f98:	0f 90       	pop	r0
     f9a:	0f be       	out	0x3f, r0	; 63
     f9c:	0f 90       	pop	r0
     f9e:	1f 90       	pop	r1
     fa0:	18 95       	reti

00000fa2 <delay>:
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
}

void delay(unsigned long ms)
{
     fa2:	9b 01       	movw	r18, r22
     fa4:	ac 01       	movw	r20, r24
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
     fa6:	7f b7       	in	r23, 0x3f	; 63
	
	cli();
     fa8:	f8 94       	cli
	m = timer0_overflow_count;
     faa:	80 91 4b 02 	lds	r24, 0x024B
     fae:	90 91 4c 02 	lds	r25, 0x024C
     fb2:	a0 91 4d 02 	lds	r26, 0x024D
     fb6:	b0 91 4e 02 	lds	r27, 0x024E
#if defined(TCNT0)
	t = TCNT0;
     fba:	66 b5       	in	r22, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
     fbc:	a8 9b       	sbis	0x15, 0	; 21
     fbe:	05 c0       	rjmp	.+10     	; 0xfca <delay+0x28>
     fc0:	6f 3f       	cpi	r22, 0xFF	; 255
     fc2:	19 f0       	breq	.+6      	; 0xfca <delay+0x28>
		m++;
     fc4:	01 96       	adiw	r24, 0x01	; 1
     fc6:	a1 1d       	adc	r26, r1
     fc8:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
     fca:	7f bf       	out	0x3f, r23	; 63
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
}

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();
     fcc:	ba 2f       	mov	r27, r26
     fce:	a9 2f       	mov	r26, r25
     fd0:	98 2f       	mov	r25, r24
     fd2:	88 27       	eor	r24, r24
     fd4:	86 0f       	add	r24, r22
     fd6:	91 1d       	adc	r25, r1
     fd8:	a1 1d       	adc	r26, r1
     fda:	b1 1d       	adc	r27, r1
     fdc:	62 e0       	ldi	r22, 0x02	; 2
     fde:	88 0f       	add	r24, r24
     fe0:	99 1f       	adc	r25, r25
     fe2:	aa 1f       	adc	r26, r26
     fe4:	bb 1f       	adc	r27, r27
     fe6:	6a 95       	dec	r22
     fe8:	d1 f7       	brne	.-12     	; 0xfde <delay+0x3c>
     fea:	bc 01       	movw	r22, r24
     fec:	2d c0       	rjmp	.+90     	; 0x1048 <delay+0xa6>
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
     fee:	ff b7       	in	r31, 0x3f	; 63
	
	cli();
     ff0:	f8 94       	cli
	m = timer0_overflow_count;
     ff2:	80 91 4b 02 	lds	r24, 0x024B
     ff6:	90 91 4c 02 	lds	r25, 0x024C
     ffa:	a0 91 4d 02 	lds	r26, 0x024D
     ffe:	b0 91 4e 02 	lds	r27, 0x024E
#if defined(TCNT0)
	t = TCNT0;
    1002:	e6 b5       	in	r30, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    1004:	a8 9b       	sbis	0x15, 0	; 21
    1006:	05 c0       	rjmp	.+10     	; 0x1012 <delay+0x70>
    1008:	ef 3f       	cpi	r30, 0xFF	; 255
    100a:	19 f0       	breq	.+6      	; 0x1012 <delay+0x70>
		m++;
    100c:	01 96       	adiw	r24, 0x01	; 1
    100e:	a1 1d       	adc	r26, r1
    1010:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    1012:	ff bf       	out	0x3f, r31	; 63
void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
		if (((uint16_t)micros() - start) >= 1000) {
    1014:	ba 2f       	mov	r27, r26
    1016:	a9 2f       	mov	r26, r25
    1018:	98 2f       	mov	r25, r24
    101a:	88 27       	eor	r24, r24
    101c:	8e 0f       	add	r24, r30
    101e:	91 1d       	adc	r25, r1
    1020:	a1 1d       	adc	r26, r1
    1022:	b1 1d       	adc	r27, r1
    1024:	e2 e0       	ldi	r30, 0x02	; 2
    1026:	88 0f       	add	r24, r24
    1028:	99 1f       	adc	r25, r25
    102a:	aa 1f       	adc	r26, r26
    102c:	bb 1f       	adc	r27, r27
    102e:	ea 95       	dec	r30
    1030:	d1 f7       	brne	.-12     	; 0x1026 <delay+0x84>
    1032:	86 1b       	sub	r24, r22
    1034:	97 0b       	sbc	r25, r23
    1036:	88 5e       	subi	r24, 0xE8	; 232
    1038:	93 40       	sbci	r25, 0x03	; 3
    103a:	c8 f2       	brcs	.-78     	; 0xfee <delay+0x4c>
			ms--;
    103c:	21 50       	subi	r18, 0x01	; 1
    103e:	30 40       	sbci	r19, 0x00	; 0
    1040:	40 40       	sbci	r20, 0x00	; 0
    1042:	50 40       	sbci	r21, 0x00	; 0
			start += 1000;
    1044:	68 51       	subi	r22, 0x18	; 24
    1046:	7c 4f       	sbci	r23, 0xFC	; 252

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
    1048:	21 15       	cp	r18, r1
    104a:	31 05       	cpc	r19, r1
    104c:	41 05       	cpc	r20, r1
    104e:	51 05       	cpc	r21, r1
    1050:	71 f6       	brne	.-100    	; 0xfee <delay+0x4c>
		if (((uint16_t)micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
    1052:	08 95       	ret

00001054 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    1054:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    1056:	84 b5       	in	r24, 0x24	; 36
    1058:	82 60       	ori	r24, 0x02	; 2
    105a:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    105c:	84 b5       	in	r24, 0x24	; 36
    105e:	81 60       	ori	r24, 0x01	; 1
    1060:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    1062:	85 b5       	in	r24, 0x25	; 37
    1064:	82 60       	ori	r24, 0x02	; 2
    1066:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    1068:	85 b5       	in	r24, 0x25	; 37
    106a:	81 60       	ori	r24, 0x01	; 1
    106c:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    106e:	ee e6       	ldi	r30, 0x6E	; 110
    1070:	f0 e0       	ldi	r31, 0x00	; 0
    1072:	80 81       	ld	r24, Z
    1074:	81 60       	ori	r24, 0x01	; 1
    1076:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    1078:	e1 e8       	ldi	r30, 0x81	; 129
    107a:	f0 e0       	ldi	r31, 0x00	; 0
    107c:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    107e:	80 81       	ld	r24, Z
    1080:	82 60       	ori	r24, 0x02	; 2
    1082:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    1084:	80 81       	ld	r24, Z
    1086:	81 60       	ori	r24, 0x01	; 1
    1088:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    108a:	e0 e8       	ldi	r30, 0x80	; 128
    108c:	f0 e0       	ldi	r31, 0x00	; 0
    108e:	80 81       	ld	r24, Z
    1090:	81 60       	ori	r24, 0x01	; 1
    1092:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    1094:	e1 eb       	ldi	r30, 0xB1	; 177
    1096:	f0 e0       	ldi	r31, 0x00	; 0
    1098:	80 81       	ld	r24, Z
    109a:	84 60       	ori	r24, 0x04	; 4
    109c:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    109e:	e0 eb       	ldi	r30, 0xB0	; 176
    10a0:	f0 e0       	ldi	r31, 0x00	; 0
    10a2:	80 81       	ld	r24, Z
    10a4:	81 60       	ori	r24, 0x01	; 1
    10a6:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
    10a8:	ea e7       	ldi	r30, 0x7A	; 122
    10aa:	f0 e0       	ldi	r31, 0x00	; 0
    10ac:	80 81       	ld	r24, Z
    10ae:	84 60       	ori	r24, 0x04	; 4
    10b0:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
    10b2:	80 81       	ld	r24, Z
    10b4:	82 60       	ori	r24, 0x02	; 2
    10b6:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
    10b8:	80 81       	ld	r24, Z
    10ba:	81 60       	ori	r24, 0x01	; 1
    10bc:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    10be:	80 81       	ld	r24, Z
    10c0:	80 68       	ori	r24, 0x80	; 128
    10c2:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    10c4:	10 92 c1 00 	sts	0x00C1, r1
#endif
}
    10c8:	08 95       	ret

000010ca <digitalWrite>:
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
	uint8_t timer = digitalPinToTimer(pin);
    10ca:	48 2f       	mov	r20, r24
    10cc:	50 e0       	ldi	r21, 0x00	; 0
    10ce:	ca 01       	movw	r24, r20
    10d0:	88 5e       	subi	r24, 0xE8	; 232
    10d2:	9e 4f       	sbci	r25, 0xFE	; 254
    10d4:	fc 01       	movw	r30, r24
    10d6:	24 91       	lpm	r18, Z+
	uint8_t bit = digitalPinToBitMask(pin);
    10d8:	ca 01       	movw	r24, r20
    10da:	8c 5f       	subi	r24, 0xFC	; 252
    10dc:	9e 4f       	sbci	r25, 0xFE	; 254
    10de:	fc 01       	movw	r30, r24
    10e0:	94 91       	lpm	r25, Z+
	uint8_t port = digitalPinToPort(pin);
    10e2:	40 51       	subi	r20, 0x10	; 16
    10e4:	5f 4f       	sbci	r21, 0xFF	; 255
    10e6:	fa 01       	movw	r30, r20
    10e8:	34 91       	lpm	r19, Z+
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    10ea:	33 23       	and	r19, r19
    10ec:	09 f4       	brne	.+2      	; 0x10f0 <digitalWrite+0x26>
    10ee:	40 c0       	rjmp	.+128    	; 0x1170 <digitalWrite+0xa6>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    10f0:	22 23       	and	r18, r18
    10f2:	51 f1       	breq	.+84     	; 0x1148 <digitalWrite+0x7e>
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    10f4:	23 30       	cpi	r18, 0x03	; 3
    10f6:	71 f0       	breq	.+28     	; 0x1114 <digitalWrite+0x4a>
    10f8:	24 30       	cpi	r18, 0x04	; 4
    10fa:	28 f4       	brcc	.+10     	; 0x1106 <digitalWrite+0x3c>
    10fc:	21 30       	cpi	r18, 0x01	; 1
    10fe:	a1 f0       	breq	.+40     	; 0x1128 <digitalWrite+0x5e>
    1100:	22 30       	cpi	r18, 0x02	; 2
    1102:	11 f5       	brne	.+68     	; 0x1148 <digitalWrite+0x7e>
    1104:	14 c0       	rjmp	.+40     	; 0x112e <digitalWrite+0x64>
    1106:	26 30       	cpi	r18, 0x06	; 6
    1108:	b1 f0       	breq	.+44     	; 0x1136 <digitalWrite+0x6c>
    110a:	27 30       	cpi	r18, 0x07	; 7
    110c:	c1 f0       	breq	.+48     	; 0x113e <digitalWrite+0x74>
    110e:	24 30       	cpi	r18, 0x04	; 4
    1110:	d9 f4       	brne	.+54     	; 0x1148 <digitalWrite+0x7e>
    1112:	04 c0       	rjmp	.+8      	; 0x111c <digitalWrite+0x52>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    1114:	80 91 80 00 	lds	r24, 0x0080
    1118:	8f 77       	andi	r24, 0x7F	; 127
    111a:	03 c0       	rjmp	.+6      	; 0x1122 <digitalWrite+0x58>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    111c:	80 91 80 00 	lds	r24, 0x0080
    1120:	8f 7d       	andi	r24, 0xDF	; 223
    1122:	80 93 80 00 	sts	0x0080, r24
    1126:	10 c0       	rjmp	.+32     	; 0x1148 <digitalWrite+0x7e>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    1128:	84 b5       	in	r24, 0x24	; 36
    112a:	8f 77       	andi	r24, 0x7F	; 127
    112c:	02 c0       	rjmp	.+4      	; 0x1132 <digitalWrite+0x68>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    112e:	84 b5       	in	r24, 0x24	; 36
    1130:	8f 7d       	andi	r24, 0xDF	; 223
    1132:	84 bd       	out	0x24, r24	; 36
    1134:	09 c0       	rjmp	.+18     	; 0x1148 <digitalWrite+0x7e>
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    1136:	80 91 b0 00 	lds	r24, 0x00B0
    113a:	8f 77       	andi	r24, 0x7F	; 127
    113c:	03 c0       	rjmp	.+6      	; 0x1144 <digitalWrite+0x7a>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    113e:	80 91 b0 00 	lds	r24, 0x00B0
    1142:	8f 7d       	andi	r24, 0xDF	; 223
    1144:	80 93 b0 00 	sts	0x00B0, r24

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	out = portOutputRegister(port);
    1148:	e3 2f       	mov	r30, r19
    114a:	f0 e0       	ldi	r31, 0x00	; 0
    114c:	ee 0f       	add	r30, r30
    114e:	ff 1f       	adc	r31, r31
    1150:	e4 52       	subi	r30, 0x24	; 36
    1152:	ff 4f       	sbci	r31, 0xFF	; 255
    1154:	a5 91       	lpm	r26, Z+
    1156:	b4 91       	lpm	r27, Z+

	uint8_t oldSREG = SREG;
    1158:	2f b7       	in	r18, 0x3f	; 63
	cli();
    115a:	f8 94       	cli

	if (val == LOW) {
    115c:	66 23       	and	r22, r22
    115e:	21 f4       	brne	.+8      	; 0x1168 <digitalWrite+0x9e>
		*out &= ~bit;
    1160:	8c 91       	ld	r24, X
    1162:	90 95       	com	r25
    1164:	89 23       	and	r24, r25
    1166:	02 c0       	rjmp	.+4      	; 0x116c <digitalWrite+0xa2>
	} else {
		*out |= bit;
    1168:	8c 91       	ld	r24, X
    116a:	89 2b       	or	r24, r25
    116c:	8c 93       	st	X, r24
	}

	SREG = oldSREG;
    116e:	2f bf       	out	0x3f, r18	; 63
    1170:	08 95       	ret

00001172 <digitalRead>:
}

int digitalRead(uint8_t pin)
{
	uint8_t timer = digitalPinToTimer(pin);
    1172:	68 2f       	mov	r22, r24
    1174:	70 e0       	ldi	r23, 0x00	; 0
    1176:	cb 01       	movw	r24, r22
    1178:	88 5e       	subi	r24, 0xE8	; 232
    117a:	9e 4f       	sbci	r25, 0xFE	; 254
    117c:	fc 01       	movw	r30, r24
    117e:	24 91       	lpm	r18, Z+
	uint8_t bit = digitalPinToBitMask(pin);
    1180:	cb 01       	movw	r24, r22
    1182:	8c 5f       	subi	r24, 0xFC	; 252
    1184:	9e 4f       	sbci	r25, 0xFE	; 254
    1186:	fc 01       	movw	r30, r24
    1188:	44 91       	lpm	r20, Z+
	uint8_t port = digitalPinToPort(pin);
    118a:	60 51       	subi	r22, 0x10	; 16
    118c:	7f 4f       	sbci	r23, 0xFF	; 255
    118e:	fb 01       	movw	r30, r22
    1190:	94 91       	lpm	r25, Z+

	if (port == NOT_A_PIN) return LOW;
    1192:	99 23       	and	r25, r25
    1194:	19 f4       	brne	.+6      	; 0x119c <digitalRead+0x2a>
    1196:	20 e0       	ldi	r18, 0x00	; 0
    1198:	30 e0       	ldi	r19, 0x00	; 0
    119a:	3c c0       	rjmp	.+120    	; 0x1214 <digitalRead+0xa2>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    119c:	22 23       	and	r18, r18
    119e:	51 f1       	breq	.+84     	; 0x11f4 <digitalRead+0x82>
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    11a0:	23 30       	cpi	r18, 0x03	; 3
    11a2:	71 f0       	breq	.+28     	; 0x11c0 <digitalRead+0x4e>
    11a4:	24 30       	cpi	r18, 0x04	; 4
    11a6:	28 f4       	brcc	.+10     	; 0x11b2 <digitalRead+0x40>
    11a8:	21 30       	cpi	r18, 0x01	; 1
    11aa:	a1 f0       	breq	.+40     	; 0x11d4 <digitalRead+0x62>
    11ac:	22 30       	cpi	r18, 0x02	; 2
    11ae:	11 f5       	brne	.+68     	; 0x11f4 <digitalRead+0x82>
    11b0:	14 c0       	rjmp	.+40     	; 0x11da <digitalRead+0x68>
    11b2:	26 30       	cpi	r18, 0x06	; 6
    11b4:	b1 f0       	breq	.+44     	; 0x11e2 <digitalRead+0x70>
    11b6:	27 30       	cpi	r18, 0x07	; 7
    11b8:	c1 f0       	breq	.+48     	; 0x11ea <digitalRead+0x78>
    11ba:	24 30       	cpi	r18, 0x04	; 4
    11bc:	d9 f4       	brne	.+54     	; 0x11f4 <digitalRead+0x82>
    11be:	04 c0       	rjmp	.+8      	; 0x11c8 <digitalRead+0x56>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    11c0:	80 91 80 00 	lds	r24, 0x0080
    11c4:	8f 77       	andi	r24, 0x7F	; 127
    11c6:	03 c0       	rjmp	.+6      	; 0x11ce <digitalRead+0x5c>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    11c8:	80 91 80 00 	lds	r24, 0x0080
    11cc:	8f 7d       	andi	r24, 0xDF	; 223
    11ce:	80 93 80 00 	sts	0x0080, r24
    11d2:	10 c0       	rjmp	.+32     	; 0x11f4 <digitalRead+0x82>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    11d4:	84 b5       	in	r24, 0x24	; 36
    11d6:	8f 77       	andi	r24, 0x7F	; 127
    11d8:	02 c0       	rjmp	.+4      	; 0x11de <digitalRead+0x6c>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    11da:	84 b5       	in	r24, 0x24	; 36
    11dc:	8f 7d       	andi	r24, 0xDF	; 223
    11de:	84 bd       	out	0x24, r24	; 36
    11e0:	09 c0       	rjmp	.+18     	; 0x11f4 <digitalRead+0x82>
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    11e2:	80 91 b0 00 	lds	r24, 0x00B0
    11e6:	8f 77       	andi	r24, 0x7F	; 127
    11e8:	03 c0       	rjmp	.+6      	; 0x11f0 <digitalRead+0x7e>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    11ea:	80 91 b0 00 	lds	r24, 0x00B0
    11ee:	8f 7d       	andi	r24, 0xDF	; 223
    11f0:	80 93 b0 00 	sts	0x00B0, r24

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
    11f4:	89 2f       	mov	r24, r25
    11f6:	90 e0       	ldi	r25, 0x00	; 0
    11f8:	88 0f       	add	r24, r24
    11fa:	99 1f       	adc	r25, r25
    11fc:	8a 51       	subi	r24, 0x1A	; 26
    11fe:	9f 4f       	sbci	r25, 0xFF	; 255
    1200:	fc 01       	movw	r30, r24
    1202:	a5 91       	lpm	r26, Z+
    1204:	b4 91       	lpm	r27, Z+
    1206:	8c 91       	ld	r24, X
    1208:	20 e0       	ldi	r18, 0x00	; 0
    120a:	30 e0       	ldi	r19, 0x00	; 0
    120c:	84 23       	and	r24, r20
    120e:	11 f0       	breq	.+4      	; 0x1214 <digitalRead+0xa2>
    1210:	21 e0       	ldi	r18, 0x01	; 1
    1212:	30 e0       	ldi	r19, 0x00	; 0
	return LOW;
}
    1214:	c9 01       	movw	r24, r18
    1216:	08 95       	ret

00001218 <_Z11serialEventv>:
#if !defined(USART_RX_vect) && !defined(USART0_RX_vect) && \
    !defined(USART_RXC_vect)
  #error "Don't know what the Data Received vector is called for the first UART"
#else
  void serialEvent() __attribute__((weak));
  void serialEvent() {}
    1218:	08 95       	ret

0000121a <__vector_18>:
  #define serialEvent_implemented
#if defined(USART_RX_vect)
  ISR(USART_RX_vect)
    121a:	1f 92       	push	r1
    121c:	0f 92       	push	r0
    121e:	0f b6       	in	r0, 0x3f	; 63
    1220:	0f 92       	push	r0
    1222:	11 24       	eor	r1, r1
    1224:	2f 93       	push	r18
    1226:	3f 93       	push	r19
    1228:	4f 93       	push	r20
    122a:	8f 93       	push	r24
    122c:	9f 93       	push	r25
    122e:	ef 93       	push	r30
    1230:	ff 93       	push	r31
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#endif
  {
  #if defined(UDR0)
    if (bit_is_clear(UCSR0A, UPE0)) {
    1232:	80 91 c0 00 	lds	r24, 0x00C0
    1236:	82 fd       	sbrc	r24, 2
    1238:	1d c0       	rjmp	.+58     	; 0x1274 <__vector_18+0x5a>
      unsigned char c = UDR0;
    123a:	40 91 c6 00 	lds	r20, 0x00C6
  ring_buffer tx_buffer3  =  { { 0 }, 0, 0 };
#endif

inline void store_char(unsigned char c, ring_buffer *buffer)
{
  int i = (unsigned int)(buffer->head + 1) % SERIAL_BUFFER_SIZE;
    123e:	20 91 94 02 	lds	r18, 0x0294
    1242:	30 91 95 02 	lds	r19, 0x0295

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != buffer->tail) {
    1246:	2f 5f       	subi	r18, 0xFF	; 255
    1248:	3f 4f       	sbci	r19, 0xFF	; 255
    124a:	2f 73       	andi	r18, 0x3F	; 63
    124c:	30 70       	andi	r19, 0x00	; 0
    124e:	80 91 96 02 	lds	r24, 0x0296
    1252:	90 91 97 02 	lds	r25, 0x0297
    1256:	28 17       	cp	r18, r24
    1258:	39 07       	cpc	r19, r25
    125a:	71 f0       	breq	.+28     	; 0x1278 <__vector_18+0x5e>
    buffer->buffer[buffer->head] = c;
    125c:	e0 91 94 02 	lds	r30, 0x0294
    1260:	f0 91 95 02 	lds	r31, 0x0295
    1264:	ec 5a       	subi	r30, 0xAC	; 172
    1266:	fd 4f       	sbci	r31, 0xFD	; 253
    1268:	40 83       	st	Z, r20
    buffer->head = i;
    126a:	30 93 95 02 	sts	0x0295, r19
    126e:	20 93 94 02 	sts	0x0294, r18
    1272:	02 c0       	rjmp	.+4      	; 0x1278 <__vector_18+0x5e>
  #if defined(UDR0)
    if (bit_is_clear(UCSR0A, UPE0)) {
      unsigned char c = UDR0;
      store_char(c, &rx_buffer);
    } else {
      unsigned char c = UDR0;
    1274:	80 91 c6 00 	lds	r24, 0x00C6
      unsigned char c = UDR;
    };
  #else
    #error UDR not defined
  #endif
  }
    1278:	ff 91       	pop	r31
    127a:	ef 91       	pop	r30
    127c:	9f 91       	pop	r25
    127e:	8f 91       	pop	r24
    1280:	4f 91       	pop	r20
    1282:	3f 91       	pop	r19
    1284:	2f 91       	pop	r18
    1286:	0f 90       	pop	r0
    1288:	0f be       	out	0x3f, r0	; 63
    128a:	0f 90       	pop	r0
    128c:	1f 90       	pop	r1
    128e:	18 95       	reti

00001290 <_Z14serialEventRunv>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
    1290:	e0 91 e8 02 	lds	r30, 0x02E8
    1294:	f0 91 e9 02 	lds	r31, 0x02E9
    1298:	e0 5c       	subi	r30, 0xC0	; 192
    129a:	ff 4f       	sbci	r31, 0xFF	; 255
    129c:	81 91       	ld	r24, Z+
    129e:	91 91       	ld	r25, Z+
    12a0:	20 81       	ld	r18, Z
    12a2:	31 81       	ldd	r19, Z+1	; 0x01
#endif

void serialEventRun(void)
{
#ifdef serialEvent_implemented
  if (Serial.available()) serialEvent();
    12a4:	82 1b       	sub	r24, r18
    12a6:	93 0b       	sbc	r25, r19
    12a8:	8f 73       	andi	r24, 0x3F	; 63
    12aa:	90 70       	andi	r25, 0x00	; 0
    12ac:	89 2b       	or	r24, r25
    12ae:	11 f0       	breq	.+4      	; 0x12b4 <_Z14serialEventRunv+0x24>
    12b0:	0e 94 0c 09 	call	0x1218	; 0x1218 <_Z11serialEventv>
    12b4:	08 95       	ret

000012b6 <__vector_19>:
#elif defined(UART_UDRE_vect)
ISR(UART_UDRE_vect)
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
    12b6:	1f 92       	push	r1
    12b8:	0f 92       	push	r0
    12ba:	0f b6       	in	r0, 0x3f	; 63
    12bc:	0f 92       	push	r0
    12be:	11 24       	eor	r1, r1
    12c0:	2f 93       	push	r18
    12c2:	3f 93       	push	r19
    12c4:	8f 93       	push	r24
    12c6:	9f 93       	push	r25
    12c8:	ef 93       	push	r30
    12ca:	ff 93       	push	r31
#endif
{
  if (tx_buffer.head == tx_buffer.tail) {
    12cc:	20 91 d8 02 	lds	r18, 0x02D8
    12d0:	30 91 d9 02 	lds	r19, 0x02D9
    12d4:	80 91 da 02 	lds	r24, 0x02DA
    12d8:	90 91 db 02 	lds	r25, 0x02DB
    12dc:	28 17       	cp	r18, r24
    12de:	39 07       	cpc	r19, r25
    12e0:	31 f4       	brne	.+12     	; 0x12ee <__vector_19+0x38>
	// Buffer empty, so disable interrupts
#if defined(UCSR0B)
    cbi(UCSR0B, UDRIE0);
    12e2:	80 91 c1 00 	lds	r24, 0x00C1
    12e6:	8f 7d       	andi	r24, 0xDF	; 223
    12e8:	80 93 c1 00 	sts	0x00C1, r24
    12ec:	14 c0       	rjmp	.+40     	; 0x1316 <__vector_19+0x60>
    cbi(UCSRB, UDRIE);
#endif
  }
  else {
    // There is more data in the output buffer. Send the next byte
    unsigned char c = tx_buffer.buffer[tx_buffer.tail];
    12ee:	e0 91 da 02 	lds	r30, 0x02DA
    12f2:	f0 91 db 02 	lds	r31, 0x02DB
    12f6:	e8 56       	subi	r30, 0x68	; 104
    12f8:	fd 4f       	sbci	r31, 0xFD	; 253
    12fa:	20 81       	ld	r18, Z
    tx_buffer.tail = (tx_buffer.tail + 1) % SERIAL_BUFFER_SIZE;
    12fc:	80 91 da 02 	lds	r24, 0x02DA
    1300:	90 91 db 02 	lds	r25, 0x02DB
    1304:	01 96       	adiw	r24, 0x01	; 1
    1306:	8f 73       	andi	r24, 0x3F	; 63
    1308:	90 70       	andi	r25, 0x00	; 0
    130a:	90 93 db 02 	sts	0x02DB, r25
    130e:	80 93 da 02 	sts	0x02DA, r24
	
  #if defined(UDR0)
    UDR0 = c;
    1312:	20 93 c6 00 	sts	0x00C6, r18
    UDR = c;
  #else
    #error UDR not defined
  #endif
  }
}
    1316:	ff 91       	pop	r31
    1318:	ef 91       	pop	r30
    131a:	9f 91       	pop	r25
    131c:	8f 91       	pop	r24
    131e:	3f 91       	pop	r19
    1320:	2f 91       	pop	r18
    1322:	0f 90       	pop	r0
    1324:	0f be       	out	0x3f, r0	; 63
    1326:	0f 90       	pop	r0
    1328:	1f 90       	pop	r1
    132a:	18 95       	reti

0000132c <_ZN14HardwareSerial5beginEm>:
  _u2x = u2x;
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud)
    132c:	af 92       	push	r10
    132e:	bf 92       	push	r11
    1330:	df 92       	push	r13
    1332:	ef 92       	push	r14
    1334:	ff 92       	push	r15
    1336:	0f 93       	push	r16
    1338:	1f 93       	push	r17
    133a:	cf 93       	push	r28
    133c:	df 93       	push	r29
    133e:	ec 01       	movw	r28, r24
    1340:	7a 01       	movw	r14, r20
    1342:	8b 01       	movw	r16, r22
    1344:	dd 24       	eor	r13, r13
    1346:	40 30       	cpi	r20, 0x00	; 0
    1348:	81 ee       	ldi	r24, 0xE1	; 225
    134a:	58 07       	cpc	r21, r24
    134c:	80 e0       	ldi	r24, 0x00	; 0
    134e:	68 07       	cpc	r22, r24
    1350:	80 e0       	ldi	r24, 0x00	; 0
    1352:	78 07       	cpc	r23, r24
    1354:	11 f0       	breq	.+4      	; 0x135a <_ZN14HardwareSerial5beginEm+0x2e>
    1356:	dd 24       	eor	r13, r13
    1358:	d3 94       	inc	r13
#endif

try_again:
  
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
    135a:	91 e0       	ldi	r25, 0x01	; 1
    135c:	a9 2e       	mov	r10, r25
    135e:	b1 2c       	mov	r11, r1
    1360:	ec 89       	ldd	r30, Y+20	; 0x14
    1362:	fd 89       	ldd	r31, Y+21	; 0x15
  }
#endif

try_again:
  
  if (use_u2x) {
    1364:	dd 20       	and	r13, r13
    1366:	69 f0       	breq	.+26     	; 0x1382 <_ZN14HardwareSerial5beginEm+0x56>
    *_ucsra = 1 << _u2x;
    1368:	c5 01       	movw	r24, r10
    136a:	08 a0       	ldd	r0, Y+32	; 0x20
    136c:	02 c0       	rjmp	.+4      	; 0x1372 <_ZN14HardwareSerial5beginEm+0x46>
    136e:	88 0f       	add	r24, r24
    1370:	99 1f       	adc	r25, r25
    1372:	0a 94       	dec	r0
    1374:	e2 f7       	brpl	.-8      	; 0x136e <_ZN14HardwareSerial5beginEm+0x42>
    1376:	80 83       	st	Z, r24
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
    1378:	60 e0       	ldi	r22, 0x00	; 0
    137a:	79 e0       	ldi	r23, 0x09	; 9
    137c:	8d e3       	ldi	r24, 0x3D	; 61
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	05 c0       	rjmp	.+10     	; 0x138c <_ZN14HardwareSerial5beginEm+0x60>
  } else {
    *_ucsra = 0;
    1382:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    1384:	60 e8       	ldi	r22, 0x80	; 128
    1386:	74 e8       	ldi	r23, 0x84	; 132
    1388:	8e e1       	ldi	r24, 0x1E	; 30
    138a:	90 e0       	ldi	r25, 0x00	; 0
    138c:	a8 01       	movw	r20, r16
    138e:	97 01       	movw	r18, r14
    1390:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <__udivmodsi4>
    1394:	21 50       	subi	r18, 0x01	; 1
    1396:	30 40       	sbci	r19, 0x00	; 0
    1398:	40 40       	sbci	r20, 0x00	; 0
    139a:	50 40       	sbci	r21, 0x00	; 0
    139c:	56 95       	lsr	r21
    139e:	47 95       	ror	r20
    13a0:	37 95       	ror	r19
    13a2:	27 95       	ror	r18
  }
  
  if ((baud_setting > 4095) && use_u2x)
    13a4:	80 e1       	ldi	r24, 0x10	; 16
    13a6:	20 30       	cpi	r18, 0x00	; 0
    13a8:	38 07       	cpc	r19, r24
    13aa:	20 f0       	brcs	.+8      	; 0x13b4 <_ZN14HardwareSerial5beginEm+0x88>
    13ac:	dd 20       	and	r13, r13
    13ae:	11 f0       	breq	.+4      	; 0x13b4 <_ZN14HardwareSerial5beginEm+0x88>
    13b0:	dd 24       	eor	r13, r13
    13b2:	d6 cf       	rjmp	.-84     	; 0x1360 <_ZN14HardwareSerial5beginEm+0x34>
    use_u2x = false;
    goto try_again;
  }

  // assign the baud_setting, a.k.a. ubbr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    13b4:	e8 89       	ldd	r30, Y+16	; 0x10
    13b6:	f9 89       	ldd	r31, Y+17	; 0x11
    13b8:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    13ba:	ea 89       	ldd	r30, Y+18	; 0x12
    13bc:	fb 89       	ldd	r31, Y+19	; 0x13
    13be:	20 83       	st	Z, r18

  transmitting = false;
    13c0:	19 a2       	std	Y+33, r1	; 0x21

  sbi(*_ucsrb, _rxen);
    13c2:	ee 89       	ldd	r30, Y+22	; 0x16
    13c4:	ff 89       	ldd	r31, Y+23	; 0x17
    13c6:	40 81       	ld	r20, Z
    13c8:	21 e0       	ldi	r18, 0x01	; 1
    13ca:	30 e0       	ldi	r19, 0x00	; 0
    13cc:	c9 01       	movw	r24, r18
    13ce:	0c 8c       	ldd	r0, Y+28	; 0x1c
    13d0:	02 c0       	rjmp	.+4      	; 0x13d6 <_ZN14HardwareSerial5beginEm+0xaa>
    13d2:	88 0f       	add	r24, r24
    13d4:	99 1f       	adc	r25, r25
    13d6:	0a 94       	dec	r0
    13d8:	e2 f7       	brpl	.-8      	; 0x13d2 <_ZN14HardwareSerial5beginEm+0xa6>
    13da:	48 2b       	or	r20, r24
    13dc:	40 83       	st	Z, r20
  sbi(*_ucsrb, _txen);
    13de:	ee 89       	ldd	r30, Y+22	; 0x16
    13e0:	ff 89       	ldd	r31, Y+23	; 0x17
    13e2:	40 81       	ld	r20, Z
    13e4:	c9 01       	movw	r24, r18
    13e6:	0d 8c       	ldd	r0, Y+29	; 0x1d
    13e8:	02 c0       	rjmp	.+4      	; 0x13ee <_ZN14HardwareSerial5beginEm+0xc2>
    13ea:	88 0f       	add	r24, r24
    13ec:	99 1f       	adc	r25, r25
    13ee:	0a 94       	dec	r0
    13f0:	e2 f7       	brpl	.-8      	; 0x13ea <_ZN14HardwareSerial5beginEm+0xbe>
    13f2:	48 2b       	or	r20, r24
    13f4:	40 83       	st	Z, r20
  sbi(*_ucsrb, _rxcie);
    13f6:	ee 89       	ldd	r30, Y+22	; 0x16
    13f8:	ff 89       	ldd	r31, Y+23	; 0x17
    13fa:	40 81       	ld	r20, Z
    13fc:	c9 01       	movw	r24, r18
    13fe:	0e 8c       	ldd	r0, Y+30	; 0x1e
    1400:	02 c0       	rjmp	.+4      	; 0x1406 <_ZN14HardwareSerial5beginEm+0xda>
    1402:	88 0f       	add	r24, r24
    1404:	99 1f       	adc	r25, r25
    1406:	0a 94       	dec	r0
    1408:	e2 f7       	brpl	.-8      	; 0x1402 <_ZN14HardwareSerial5beginEm+0xd6>
    140a:	48 2b       	or	r20, r24
    140c:	40 83       	st	Z, r20
  cbi(*_ucsrb, _udrie);
    140e:	ee 89       	ldd	r30, Y+22	; 0x16
    1410:	ff 89       	ldd	r31, Y+23	; 0x17
    1412:	80 81       	ld	r24, Z
    1414:	0f 8c       	ldd	r0, Y+31	; 0x1f
    1416:	02 c0       	rjmp	.+4      	; 0x141c <_ZN14HardwareSerial5beginEm+0xf0>
    1418:	22 0f       	add	r18, r18
    141a:	33 1f       	adc	r19, r19
    141c:	0a 94       	dec	r0
    141e:	e2 f7       	brpl	.-8      	; 0x1418 <_ZN14HardwareSerial5beginEm+0xec>
    1420:	20 95       	com	r18
    1422:	28 23       	and	r18, r24
    1424:	20 83       	st	Z, r18
}
    1426:	df 91       	pop	r29
    1428:	cf 91       	pop	r28
    142a:	1f 91       	pop	r17
    142c:	0f 91       	pop	r16
    142e:	ff 90       	pop	r15
    1430:	ef 90       	pop	r14
    1432:	df 90       	pop	r13
    1434:	bf 90       	pop	r11
    1436:	af 90       	pop	r10
    1438:	08 95       	ret

0000143a <_ZN14HardwareSerial9availableEv>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
    143a:	dc 01       	movw	r26, r24
    143c:	1c 96       	adiw	r26, 0x0c	; 12
    143e:	ed 91       	ld	r30, X+
    1440:	fc 91       	ld	r31, X
    1442:	1d 97       	sbiw	r26, 0x0d	; 13
    1444:	e0 5c       	subi	r30, 0xC0	; 192
    1446:	ff 4f       	sbci	r31, 0xFF	; 255
    1448:	21 91       	ld	r18, Z+
    144a:	31 91       	ld	r19, Z+
    144c:	80 81       	ld	r24, Z
    144e:	91 81       	ldd	r25, Z+1	; 0x01
    1450:	28 1b       	sub	r18, r24
    1452:	39 0b       	sbc	r19, r25
    1454:	2f 73       	andi	r18, 0x3F	; 63
    1456:	30 70       	andi	r19, 0x00	; 0
}
    1458:	c9 01       	movw	r24, r18
    145a:	08 95       	ret

0000145c <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
    145c:	dc 01       	movw	r26, r24
    145e:	1c 96       	adiw	r26, 0x0c	; 12
    1460:	ed 91       	ld	r30, X+
    1462:	fc 91       	ld	r31, X
    1464:	1d 97       	sbiw	r26, 0x0d	; 13
    1466:	e0 5c       	subi	r30, 0xC0	; 192
    1468:	ff 4f       	sbci	r31, 0xFF	; 255
    146a:	20 81       	ld	r18, Z
    146c:	31 81       	ldd	r19, Z+1	; 0x01
    146e:	e0 54       	subi	r30, 0x40	; 64
    1470:	f0 40       	sbci	r31, 0x00	; 0
    1472:	df 01       	movw	r26, r30
    1474:	ae 5b       	subi	r26, 0xBE	; 190
    1476:	bf 4f       	sbci	r27, 0xFF	; 255
    1478:	8d 91       	ld	r24, X+
    147a:	9c 91       	ld	r25, X
    147c:	11 97       	sbiw	r26, 0x01	; 1
    147e:	28 17       	cp	r18, r24
    1480:	39 07       	cpc	r19, r25
    1482:	19 f4       	brne	.+6      	; 0x148a <_ZN14HardwareSerial4peekEv+0x2e>
    1484:	2f ef       	ldi	r18, 0xFF	; 255
    1486:	3f ef       	ldi	r19, 0xFF	; 255
    1488:	07 c0       	rjmp	.+14     	; 0x1498 <_ZN14HardwareSerial4peekEv+0x3c>
    return -1;
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
    148a:	8d 91       	ld	r24, X+
    148c:	9c 91       	ld	r25, X
    148e:	e8 0f       	add	r30, r24
    1490:	f9 1f       	adc	r31, r25
    1492:	80 81       	ld	r24, Z
    1494:	28 2f       	mov	r18, r24
    1496:	30 e0       	ldi	r19, 0x00	; 0
  }
}
    1498:	c9 01       	movw	r24, r18
    149a:	08 95       	ret

0000149c <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
    149c:	dc 01       	movw	r26, r24
    149e:	1c 96       	adiw	r26, 0x0c	; 12
    14a0:	ed 91       	ld	r30, X+
    14a2:	fc 91       	ld	r31, X
    14a4:	1d 97       	sbiw	r26, 0x0d	; 13
    14a6:	e0 5c       	subi	r30, 0xC0	; 192
    14a8:	ff 4f       	sbci	r31, 0xFF	; 255
    14aa:	20 81       	ld	r18, Z
    14ac:	31 81       	ldd	r19, Z+1	; 0x01
    14ae:	e0 54       	subi	r30, 0x40	; 64
    14b0:	f0 40       	sbci	r31, 0x00	; 0
    14b2:	df 01       	movw	r26, r30
    14b4:	ae 5b       	subi	r26, 0xBE	; 190
    14b6:	bf 4f       	sbci	r27, 0xFF	; 255
    14b8:	8d 91       	ld	r24, X+
    14ba:	9c 91       	ld	r25, X
    14bc:	11 97       	sbiw	r26, 0x01	; 1
    14be:	28 17       	cp	r18, r24
    14c0:	39 07       	cpc	r19, r25
    14c2:	19 f4       	brne	.+6      	; 0x14ca <_ZN14HardwareSerial4readEv+0x2e>
    14c4:	2f ef       	ldi	r18, 0xFF	; 255
    14c6:	3f ef       	ldi	r19, 0xFF	; 255
    14c8:	10 c0       	rjmp	.+32     	; 0x14ea <_ZN14HardwareSerial4readEv+0x4e>
    return -1;
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
    14ca:	8d 91       	ld	r24, X+
    14cc:	9c 91       	ld	r25, X
    14ce:	11 97       	sbiw	r26, 0x01	; 1
    14d0:	e8 0f       	add	r30, r24
    14d2:	f9 1f       	adc	r31, r25
    14d4:	20 81       	ld	r18, Z
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % SERIAL_BUFFER_SIZE;
    14d6:	8d 91       	ld	r24, X+
    14d8:	9c 91       	ld	r25, X
    14da:	11 97       	sbiw	r26, 0x01	; 1
    14dc:	01 96       	adiw	r24, 0x01	; 1
    14de:	8f 73       	andi	r24, 0x3F	; 63
    14e0:	90 70       	andi	r25, 0x00	; 0
    14e2:	11 96       	adiw	r26, 0x01	; 1
    14e4:	9c 93       	st	X, r25
    14e6:	8e 93       	st	-X, r24
    return c;
    14e8:	30 e0       	ldi	r19, 0x00	; 0
  }
}
    14ea:	c9 01       	movw	r24, r18
    14ec:	08 95       	ret

000014ee <_ZN14HardwareSerial5flushEv>:

void HardwareSerial::flush()
    14ee:	dc 01       	movw	r26, r24
{
  // UDR is kept full while the buffer is not empty, so TXC triggers when EMPTY && SENT
  while (transmitting && ! (*_ucsra & _BV(TXC0)));
    14f0:	91 96       	adiw	r26, 0x21	; 33
    14f2:	8c 91       	ld	r24, X
    14f4:	91 97       	sbiw	r26, 0x21	; 33
    14f6:	88 23       	and	r24, r24
    14f8:	39 f0       	breq	.+14     	; 0x1508 <_ZN14HardwareSerial5flushEv+0x1a>
    14fa:	54 96       	adiw	r26, 0x14	; 20
    14fc:	ed 91       	ld	r30, X+
    14fe:	fc 91       	ld	r31, X
    1500:	55 97       	sbiw	r26, 0x15	; 21
    1502:	80 81       	ld	r24, Z
    1504:	86 ff       	sbrs	r24, 6
    1506:	f9 cf       	rjmp	.-14     	; 0x14fa <_ZN14HardwareSerial5flushEv+0xc>
  transmitting = false;
    1508:	91 96       	adiw	r26, 0x21	; 33
    150a:	1c 92       	st	X, r1
}
    150c:	08 95       	ret

0000150e <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
    150e:	cf 93       	push	r28
    1510:	df 93       	push	r29
    1512:	ec 01       	movw	r28, r24
{
  int i = (_tx_buffer->head + 1) % SERIAL_BUFFER_SIZE;
    1514:	ee 85       	ldd	r30, Y+14	; 0x0e
    1516:	ff 85       	ldd	r31, Y+15	; 0x0f
    1518:	e0 5c       	subi	r30, 0xC0	; 192
    151a:	ff 4f       	sbci	r31, 0xFF	; 255
    151c:	20 81       	ld	r18, Z
    151e:	31 81       	ldd	r19, Z+1	; 0x01
    1520:	e0 54       	subi	r30, 0x40	; 64
    1522:	f0 40       	sbci	r31, 0x00	; 0
    1524:	2f 5f       	subi	r18, 0xFF	; 255
    1526:	3f 4f       	sbci	r19, 0xFF	; 255
    1528:	2f 73       	andi	r18, 0x3F	; 63
    152a:	30 70       	andi	r19, 0x00	; 0
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  // ???: return 0 here instead?
  while (i == _tx_buffer->tail)
    152c:	df 01       	movw	r26, r30
    152e:	ae 5b       	subi	r26, 0xBE	; 190
    1530:	bf 4f       	sbci	r27, 0xFF	; 255
    1532:	8d 91       	ld	r24, X+
    1534:	9c 91       	ld	r25, X
    1536:	11 97       	sbiw	r26, 0x01	; 1
    1538:	28 17       	cp	r18, r24
    153a:	39 07       	cpc	r19, r25
    153c:	d1 f3       	breq	.-12     	; 0x1532 <_ZN14HardwareSerial5writeEh+0x24>
    ;
	
  _tx_buffer->buffer[_tx_buffer->head] = c;
    153e:	e0 5c       	subi	r30, 0xC0	; 192
    1540:	ff 4f       	sbci	r31, 0xFF	; 255
    1542:	80 81       	ld	r24, Z
    1544:	91 81       	ldd	r25, Z+1	; 0x01
    1546:	e0 54       	subi	r30, 0x40	; 64
    1548:	f0 40       	sbci	r31, 0x00	; 0
    154a:	e8 0f       	add	r30, r24
    154c:	f9 1f       	adc	r31, r25
    154e:	60 83       	st	Z, r22
  _tx_buffer->head = i;
    1550:	ee 85       	ldd	r30, Y+14	; 0x0e
    1552:	ff 85       	ldd	r31, Y+15	; 0x0f
    1554:	e0 5c       	subi	r30, 0xC0	; 192
    1556:	ff 4f       	sbci	r31, 0xFF	; 255
    1558:	31 83       	std	Z+1, r19	; 0x01
    155a:	20 83       	st	Z, r18
	
  sbi(*_ucsrb, _udrie);
    155c:	ee 89       	ldd	r30, Y+22	; 0x16
    155e:	ff 89       	ldd	r31, Y+23	; 0x17
    1560:	20 81       	ld	r18, Z
    1562:	81 e0       	ldi	r24, 0x01	; 1
    1564:	90 e0       	ldi	r25, 0x00	; 0
    1566:	0f 8c       	ldd	r0, Y+31	; 0x1f
    1568:	02 c0       	rjmp	.+4      	; 0x156e <_ZN14HardwareSerial5writeEh+0x60>
    156a:	88 0f       	add	r24, r24
    156c:	99 1f       	adc	r25, r25
    156e:	0a 94       	dec	r0
    1570:	e2 f7       	brpl	.-8      	; 0x156a <_ZN14HardwareSerial5writeEh+0x5c>
    1572:	28 2b       	or	r18, r24
    1574:	20 83       	st	Z, r18
  // clear the TXC bit -- "can be cleared by writing a one to its bit location"
  transmitting = true;
    1576:	81 e0       	ldi	r24, 0x01	; 1
    1578:	89 a3       	std	Y+33, r24	; 0x21
  sbi(*_ucsra, TXC0);
    157a:	ec 89       	ldd	r30, Y+20	; 0x14
    157c:	fd 89       	ldd	r31, Y+21	; 0x15
    157e:	80 81       	ld	r24, Z
    1580:	80 64       	ori	r24, 0x40	; 64
    1582:	80 83       	st	Z, r24
  
  return 1;
}
    1584:	81 e0       	ldi	r24, 0x01	; 1
    1586:	90 e0       	ldi	r25, 0x00	; 0
    1588:	df 91       	pop	r29
    158a:	cf 91       	pop	r28
    158c:	08 95       	ret

0000158e <_GLOBAL__I_rx_buffer>:
    158e:	10 92 df 02 	sts	0x02DF, r1
    1592:	10 92 de 02 	sts	0x02DE, r1
    1596:	88 ee       	ldi	r24, 0xE8	; 232
    1598:	93 e0       	ldi	r25, 0x03	; 3
    159a:	a0 e0       	ldi	r26, 0x00	; 0
    159c:	b0 e0       	ldi	r27, 0x00	; 0
    159e:	80 93 e0 02 	sts	0x02E0, r24
    15a2:	90 93 e1 02 	sts	0x02E1, r25
    15a6:	a0 93 e2 02 	sts	0x02E2, r26
    15aa:	b0 93 e3 02 	sts	0x02E3, r27

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
    15ae:	88 e6       	ldi	r24, 0x68	; 104
    15b0:	91 e0       	ldi	r25, 0x01	; 1
    15b2:	90 93 dd 02 	sts	0x02DD, r25
    15b6:	80 93 dc 02 	sts	0x02DC, r24
{
  _rx_buffer = rx_buffer;
    15ba:	84 e5       	ldi	r24, 0x54	; 84
    15bc:	92 e0       	ldi	r25, 0x02	; 2
    15be:	90 93 e9 02 	sts	0x02E9, r25
    15c2:	80 93 e8 02 	sts	0x02E8, r24
  _tx_buffer = tx_buffer;
    15c6:	88 e9       	ldi	r24, 0x98	; 152
    15c8:	92 e0       	ldi	r25, 0x02	; 2
    15ca:	90 93 eb 02 	sts	0x02EB, r25
    15ce:	80 93 ea 02 	sts	0x02EA, r24
  _ubrrh = ubrrh;
    15d2:	85 ec       	ldi	r24, 0xC5	; 197
    15d4:	90 e0       	ldi	r25, 0x00	; 0
    15d6:	90 93 ed 02 	sts	0x02ED, r25
    15da:	80 93 ec 02 	sts	0x02EC, r24
  _ubrrl = ubrrl;
    15de:	84 ec       	ldi	r24, 0xC4	; 196
    15e0:	90 e0       	ldi	r25, 0x00	; 0
    15e2:	90 93 ef 02 	sts	0x02EF, r25
    15e6:	80 93 ee 02 	sts	0x02EE, r24
  _ucsra = ucsra;
    15ea:	80 ec       	ldi	r24, 0xC0	; 192
    15ec:	90 e0       	ldi	r25, 0x00	; 0
    15ee:	90 93 f1 02 	sts	0x02F1, r25
    15f2:	80 93 f0 02 	sts	0x02F0, r24
  _ucsrb = ucsrb;
    15f6:	81 ec       	ldi	r24, 0xC1	; 193
    15f8:	90 e0       	ldi	r25, 0x00	; 0
    15fa:	90 93 f3 02 	sts	0x02F3, r25
    15fe:	80 93 f2 02 	sts	0x02F2, r24
  _ucsrc = ucsrc;
    1602:	82 ec       	ldi	r24, 0xC2	; 194
    1604:	90 e0       	ldi	r25, 0x00	; 0
    1606:	90 93 f5 02 	sts	0x02F5, r25
    160a:	80 93 f4 02 	sts	0x02F4, r24
  _udr = udr;
    160e:	86 ec       	ldi	r24, 0xC6	; 198
    1610:	90 e0       	ldi	r25, 0x00	; 0
    1612:	90 93 f7 02 	sts	0x02F7, r25
    1616:	80 93 f6 02 	sts	0x02F6, r24
  _rxen = rxen;
    161a:	84 e0       	ldi	r24, 0x04	; 4
    161c:	80 93 f8 02 	sts	0x02F8, r24
  _txen = txen;
    1620:	83 e0       	ldi	r24, 0x03	; 3
    1622:	80 93 f9 02 	sts	0x02F9, r24
  _rxcie = rxcie;
    1626:	87 e0       	ldi	r24, 0x07	; 7
    1628:	80 93 fa 02 	sts	0x02FA, r24
  _udrie = udrie;
    162c:	85 e0       	ldi	r24, 0x05	; 5
    162e:	80 93 fb 02 	sts	0x02FB, r24
  _u2x = u2x;
    1632:	81 e0       	ldi	r24, 0x01	; 1
    1634:	80 93 fc 02 	sts	0x02FC, r24
// Preinstantiate Objects //////////////////////////////////////////////////////

#if defined(UBRRH) && defined(UBRRL)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRRH, &UBRRL, &UCSRA, &UCSRB, &UCSRC, &UDR, RXEN, TXEN, RXCIE, UDRIE, U2X);
#elif defined(UBRR0H) && defined(UBRR0L)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRR0H, &UBRR0L, &UCSR0A, &UCSR0B, &UCSR0C, &UDR0, RXEN0, TXEN0, RXCIE0, UDRIE0, U2X0);
    1638:	08 95       	ret

0000163a <main>:
#include <Arduino.h>

int main(void)
    163a:	cf 93       	push	r28
    163c:	df 93       	push	r29
{
	init();
    163e:	0e 94 2a 08 	call	0x1054	; 0x1054 <init>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    1642:	0e 94 88 02 	call	0x510	; 0x510 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    1646:	c8 e4       	ldi	r28, 0x48	; 72
    1648:	d9 e0       	ldi	r29, 0x09	; 9
#endif
	
	setup();
    
	for (;;) {
		loop();
    164a:	0e 94 51 02 	call	0x4a2	; 0x4a2 <loop>
		if (serialEventRun) serialEventRun();
    164e:	20 97       	sbiw	r28, 0x00	; 0
    1650:	e1 f3       	breq	.-8      	; 0x164a <main+0x10>
    1652:	0e 94 48 09 	call	0x1290	; 0x1290 <_Z14serialEventRunv>
    1656:	f9 cf       	rjmp	.-14     	; 0x164a <main+0x10>

00001658 <_ZN5Print5writeEPKhj>:
#include "Print.h"

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
    1658:	cf 92       	push	r12
    165a:	df 92       	push	r13
    165c:	ef 92       	push	r14
    165e:	ff 92       	push	r15
    1660:	0f 93       	push	r16
    1662:	1f 93       	push	r17
    1664:	cf 93       	push	r28
    1666:	df 93       	push	r29
    1668:	7c 01       	movw	r14, r24
    166a:	6b 01       	movw	r12, r22
    166c:	8a 01       	movw	r16, r20
    166e:	c0 e0       	ldi	r28, 0x00	; 0
    1670:	d0 e0       	ldi	r29, 0x00	; 0
    1672:	0f c0       	rjmp	.+30     	; 0x1692 <_ZN5Print5writeEPKhj+0x3a>
{
  size_t n = 0;
  while (size--) {
    n += write(*buffer++);
    1674:	d6 01       	movw	r26, r12
    1676:	6d 91       	ld	r22, X+
    1678:	6d 01       	movw	r12, r26
    167a:	d7 01       	movw	r26, r14
    167c:	ed 91       	ld	r30, X+
    167e:	fc 91       	ld	r31, X
    1680:	01 90       	ld	r0, Z+
    1682:	f0 81       	ld	r31, Z
    1684:	e0 2d       	mov	r30, r0
    1686:	c7 01       	movw	r24, r14
    1688:	09 95       	icall
    168a:	c8 0f       	add	r28, r24
    168c:	d9 1f       	adc	r29, r25
    168e:	01 50       	subi	r16, 0x01	; 1
    1690:	10 40       	sbci	r17, 0x00	; 0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
    1692:	01 15       	cp	r16, r1
    1694:	11 05       	cpc	r17, r1
    1696:	71 f7       	brne	.-36     	; 0x1674 <_ZN5Print5writeEPKhj+0x1c>
    n += write(*buffer++);
  }
  return n;
}
    1698:	ce 01       	movw	r24, r28
    169a:	df 91       	pop	r29
    169c:	cf 91       	pop	r28
    169e:	1f 91       	pop	r17
    16a0:	0f 91       	pop	r16
    16a2:	ff 90       	pop	r15
    16a4:	ef 90       	pop	r14
    16a6:	df 90       	pop	r13
    16a8:	cf 90       	pop	r12
    16aa:	08 95       	ret

000016ac <_ZN5Print5printEPK19__FlashStringHelper>:

size_t Print::print(const __FlashStringHelper *ifsh)
    16ac:	ef 92       	push	r14
    16ae:	ff 92       	push	r15
    16b0:	0f 93       	push	r16
    16b2:	1f 93       	push	r17
    16b4:	cf 93       	push	r28
    16b6:	df 93       	push	r29
    16b8:	7c 01       	movw	r14, r24
{
  const char PROGMEM *p = (const char PROGMEM *)ifsh;
    16ba:	8b 01       	movw	r16, r22
    16bc:	c0 e0       	ldi	r28, 0x00	; 0
    16be:	d0 e0       	ldi	r29, 0x00	; 0
    16c0:	f8 01       	movw	r30, r16
  size_t n = 0;
  while (1) {
    unsigned char c = pgm_read_byte(p++);
    16c2:	0f 5f       	subi	r16, 0xFF	; 255
    16c4:	1f 4f       	sbci	r17, 0xFF	; 255
    16c6:	64 91       	lpm	r22, Z+
    if (c == 0) break;
    16c8:	66 23       	and	r22, r22
    16ca:	59 f0       	breq	.+22     	; 0x16e2 <_ZN5Print5printEPK19__FlashStringHelper+0x36>
    n += write(c);
    16cc:	d7 01       	movw	r26, r14
    16ce:	ed 91       	ld	r30, X+
    16d0:	fc 91       	ld	r31, X
    16d2:	01 90       	ld	r0, Z+
    16d4:	f0 81       	ld	r31, Z
    16d6:	e0 2d       	mov	r30, r0
    16d8:	c7 01       	movw	r24, r14
    16da:	09 95       	icall
    16dc:	c8 0f       	add	r28, r24
    16de:	d9 1f       	adc	r29, r25
    16e0:	ef cf       	rjmp	.-34     	; 0x16c0 <_ZN5Print5printEPK19__FlashStringHelper+0x14>
  }
  return n;
}
    16e2:	ce 01       	movw	r24, r28
    16e4:	df 91       	pop	r29
    16e6:	cf 91       	pop	r28
    16e8:	1f 91       	pop	r17
    16ea:	0f 91       	pop	r16
    16ec:	ff 90       	pop	r15
    16ee:	ef 90       	pop	r14
    16f0:	08 95       	ret

000016f2 <_ZN5Print5printEc>:
size_t Print::print(const char str[])
{
  return write(str);
}

size_t Print::print(char c)
    16f2:	dc 01       	movw	r26, r24
{
  return write(c);
    16f4:	ed 91       	ld	r30, X+
    16f6:	fc 91       	ld	r31, X
    16f8:	01 90       	ld	r0, Z+
    16fa:	f0 81       	ld	r31, Z
    16fc:	e0 2d       	mov	r30, r0
    16fe:	09 95       	icall
}
    1700:	08 95       	ret

00001702 <_ZN5Print7printlnEv>:
size_t Print::print(const Printable& x)
{
  return x.printTo(*this);
}

size_t Print::println(void)
    1702:	ef 92       	push	r14
    1704:	ff 92       	push	r15
    1706:	0f 93       	push	r16
    1708:	1f 93       	push	r17
    170a:	8c 01       	movw	r16, r24
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    170c:	dc 01       	movw	r26, r24
    170e:	ed 91       	ld	r30, X+
    1710:	fc 91       	ld	r31, X
    1712:	01 90       	ld	r0, Z+
    1714:	f0 81       	ld	r31, Z
    1716:	e0 2d       	mov	r30, r0
    1718:	6d e0       	ldi	r22, 0x0D	; 13
    171a:	09 95       	icall
    171c:	7c 01       	movw	r14, r24
size_t Print::println(void)
{
  size_t n = print('\r');
  n += print('\n');
  return n;
}
    171e:	d8 01       	movw	r26, r16
    1720:	ed 91       	ld	r30, X+
    1722:	fc 91       	ld	r31, X
    1724:	01 90       	ld	r0, Z+
    1726:	f0 81       	ld	r31, Z
    1728:	e0 2d       	mov	r30, r0
    172a:	c8 01       	movw	r24, r16
    172c:	6a e0       	ldi	r22, 0x0A	; 10
    172e:	09 95       	icall
    1730:	9c 01       	movw	r18, r24
    1732:	2e 0d       	add	r18, r14
    1734:	3f 1d       	adc	r19, r15
    1736:	c9 01       	movw	r24, r18
    1738:	1f 91       	pop	r17
    173a:	0f 91       	pop	r16
    173c:	ff 90       	pop	r15
    173e:	ef 90       	pop	r14
    1740:	08 95       	ret

00001742 <_ZN5Print5writeEPKc>:
    1742:	cf 93       	push	r28
    1744:	df 93       	push	r29
    1746:	ec 01       	movw	r28, r24
    1748:	61 15       	cp	r22, r1
    174a:	71 05       	cpc	r23, r1
    174c:	19 f4       	brne	.+6      	; 0x1754 <_ZN5Print5writeEPKc+0x12>
    174e:	20 e0       	ldi	r18, 0x00	; 0
    1750:	30 e0       	ldi	r19, 0x00	; 0
    1752:	0f c0       	rjmp	.+30     	; 0x1772 <_ZN5Print5writeEPKc+0x30>
    1754:	db 01       	movw	r26, r22
    1756:	0d 90       	ld	r0, X+
    1758:	00 20       	and	r0, r0
    175a:	e9 f7       	brne	.-6      	; 0x1756 <_ZN5Print5writeEPKc+0x14>
    175c:	11 97       	sbiw	r26, 0x01	; 1
    175e:	a6 1b       	sub	r26, r22
    1760:	b7 0b       	sbc	r27, r23
    1762:	e8 81       	ld	r30, Y
    1764:	f9 81       	ldd	r31, Y+1	; 0x01
    1766:	02 80       	ldd	r0, Z+2	; 0x02
    1768:	f3 81       	ldd	r31, Z+3	; 0x03
    176a:	e0 2d       	mov	r30, r0
    176c:	ad 01       	movw	r20, r26
    176e:	09 95       	icall
    1770:	9c 01       	movw	r18, r24
    1772:	c9 01       	movw	r24, r18
    1774:	df 91       	pop	r29
    1776:	cf 91       	pop	r28
    1778:	08 95       	ret

0000177a <_ZN5Print11printNumberEmh>:
  return n;
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
    177a:	4f 92       	push	r4
    177c:	5f 92       	push	r5
    177e:	7f 92       	push	r7
    1780:	8f 92       	push	r8
    1782:	9f 92       	push	r9
    1784:	af 92       	push	r10
    1786:	bf 92       	push	r11
    1788:	cf 92       	push	r12
    178a:	df 92       	push	r13
    178c:	ef 92       	push	r14
    178e:	ff 92       	push	r15
    1790:	0f 93       	push	r16
    1792:	1f 93       	push	r17
    1794:	df 93       	push	r29
    1796:	cf 93       	push	r28
    1798:	cd b7       	in	r28, 0x3d	; 61
    179a:	de b7       	in	r29, 0x3e	; 62
    179c:	a1 97       	sbiw	r28, 0x21	; 33
    179e:	0f b6       	in	r0, 0x3f	; 63
    17a0:	f8 94       	cli
    17a2:	de bf       	out	0x3e, r29	; 62
    17a4:	0f be       	out	0x3f, r0	; 63
    17a6:	cd bf       	out	0x3d, r28	; 61
    17a8:	2c 01       	movw	r4, r24
    17aa:	74 2e       	mov	r7, r20
    17ac:	cb 01       	movw	r24, r22
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    17ae:	22 30       	cpi	r18, 0x02	; 2
    17b0:	08 f4       	brcc	.+2      	; 0x17b4 <_ZN5Print11printNumberEmh+0x3a>
    17b2:	2a e0       	ldi	r18, 0x0A	; 10

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    17b4:	19 a2       	std	Y+33, r1	; 0x21
    17b6:	31 e2       	ldi	r19, 0x21	; 33
    17b8:	c3 2e       	mov	r12, r19
    17ba:	d1 2c       	mov	r13, r1
    17bc:	cc 0e       	add	r12, r28
    17be:	dd 1e       	adc	r13, r29
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
    17c0:	82 2e       	mov	r8, r18
    17c2:	99 24       	eor	r9, r9
    17c4:	aa 24       	eor	r10, r10
    17c6:	bb 24       	eor	r11, r11
    17c8:	67 2d       	mov	r22, r7
    17ca:	75 2f       	mov	r23, r21
    17cc:	a5 01       	movw	r20, r10
    17ce:	94 01       	movw	r18, r8
    17d0:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <__udivmodsi4>
    17d4:	79 01       	movw	r14, r18
    17d6:	8a 01       	movw	r16, r20
    char c = m - base * n;
    17d8:	c8 01       	movw	r24, r16
    17da:	b7 01       	movw	r22, r14
    17dc:	a5 01       	movw	r20, r10
    17de:	94 01       	movw	r18, r8
    17e0:	0e 94 97 0c 	call	0x192e	; 0x192e <__mulsi3>
    17e4:	47 2d       	mov	r20, r7
    17e6:	46 1b       	sub	r20, r22
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    17e8:	08 94       	sec
    17ea:	c1 08       	sbc	r12, r1
    17ec:	d1 08       	sbc	r13, r1
    17ee:	4a 30       	cpi	r20, 0x0A	; 10
    17f0:	14 f4       	brge	.+4      	; 0x17f6 <_ZN5Print11printNumberEmh+0x7c>
    17f2:	40 5d       	subi	r20, 0xD0	; 208
    17f4:	01 c0       	rjmp	.+2      	; 0x17f8 <_ZN5Print11printNumberEmh+0x7e>
    17f6:	49 5c       	subi	r20, 0xC9	; 201
    17f8:	f6 01       	movw	r30, r12
    17fa:	40 83       	st	Z, r20
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    17fc:	e1 14       	cp	r14, r1
    17fe:	f1 04       	cpc	r15, r1
    1800:	01 05       	cpc	r16, r1
    1802:	11 05       	cpc	r17, r1
    1804:	21 f0       	breq	.+8      	; 0x180e <_ZN5Print11printNumberEmh+0x94>
    1806:	7e 2c       	mov	r7, r14
    1808:	5f 2d       	mov	r21, r15
    180a:	c8 01       	movw	r24, r16
    180c:	dd cf       	rjmp	.-70     	; 0x17c8 <_ZN5Print11printNumberEmh+0x4e>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
    180e:	c2 01       	movw	r24, r4
    1810:	b6 01       	movw	r22, r12
    1812:	0e 94 a1 0b 	call	0x1742	; 0x1742 <_ZN5Print5writeEPKc>
}
    1816:	a1 96       	adiw	r28, 0x21	; 33
    1818:	0f b6       	in	r0, 0x3f	; 63
    181a:	f8 94       	cli
    181c:	de bf       	out	0x3e, r29	; 62
    181e:	0f be       	out	0x3f, r0	; 63
    1820:	cd bf       	out	0x3d, r28	; 61
    1822:	cf 91       	pop	r28
    1824:	df 91       	pop	r29
    1826:	1f 91       	pop	r17
    1828:	0f 91       	pop	r16
    182a:	ff 90       	pop	r15
    182c:	ef 90       	pop	r14
    182e:	df 90       	pop	r13
    1830:	cf 90       	pop	r12
    1832:	bf 90       	pop	r11
    1834:	af 90       	pop	r10
    1836:	9f 90       	pop	r9
    1838:	8f 90       	pop	r8
    183a:	7f 90       	pop	r7
    183c:	5f 90       	pop	r5
    183e:	4f 90       	pop	r4
    1840:	08 95       	ret

00001842 <_ZN5Print5printEmi>:
  } else {
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
    1842:	dc 01       	movw	r26, r24
{
  if (base == 0) return write(n);
    1844:	21 15       	cp	r18, r1
    1846:	31 05       	cpc	r19, r1
    1848:	41 f4       	brne	.+16     	; 0x185a <_ZN5Print5printEmi+0x18>
    184a:	ed 91       	ld	r30, X+
    184c:	fc 91       	ld	r31, X
    184e:	01 90       	ld	r0, Z+
    1850:	f0 81       	ld	r31, Z
    1852:	e0 2d       	mov	r30, r0
    1854:	64 2f       	mov	r22, r20
    1856:	09 95       	icall
    1858:	08 95       	ret
  else return printNumber(n, base);
    185a:	0e 94 bd 0b 	call	0x177a	; 0x177a <_ZN5Print11printNumberEmh>
}
    185e:	08 95       	ret

00001860 <_ZN5Print5printEji>:
size_t Print::print(int n, int base)
{
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
    1860:	ef 92       	push	r14
    1862:	ff 92       	push	r15
    1864:	0f 93       	push	r16
    1866:	1f 93       	push	r17
    1868:	9a 01       	movw	r18, r20
{
  return print((unsigned long) n, base);
    186a:	7b 01       	movw	r14, r22
    186c:	00 e0       	ldi	r16, 0x00	; 0
    186e:	10 e0       	ldi	r17, 0x00	; 0
    1870:	b8 01       	movw	r22, r16
    1872:	a7 01       	movw	r20, r14
    1874:	0e 94 21 0c 	call	0x1842	; 0x1842 <_ZN5Print5printEmi>
}
    1878:	1f 91       	pop	r17
    187a:	0f 91       	pop	r16
    187c:	ff 90       	pop	r15
    187e:	ef 90       	pop	r14
    1880:	08 95       	ret

00001882 <_ZN5Print5printEli>:

size_t Print::print(long n, int base)
    1882:	cf 92       	push	r12
    1884:	df 92       	push	r13
    1886:	ef 92       	push	r14
    1888:	ff 92       	push	r15
    188a:	0f 93       	push	r16
    188c:	1f 93       	push	r17
    188e:	cf 93       	push	r28
    1890:	df 93       	push	r29
    1892:	ec 01       	movw	r28, r24
    1894:	6a 01       	movw	r12, r20
    1896:	7b 01       	movw	r14, r22
{
  if (base == 0) {
    1898:	21 15       	cp	r18, r1
    189a:	31 05       	cpc	r19, r1
    189c:	41 f4       	brne	.+16     	; 0x18ae <_ZN5Print5printEli+0x2c>
    return write(n);
    189e:	e8 81       	ld	r30, Y
    18a0:	f9 81       	ldd	r31, Y+1	; 0x01
    18a2:	01 90       	ld	r0, Z+
    18a4:	f0 81       	ld	r31, Z
    18a6:	e0 2d       	mov	r30, r0
    18a8:	64 2f       	mov	r22, r20
    18aa:	09 95       	icall
    18ac:	1f c0       	rjmp	.+62     	; 0x18ec <_ZN5Print5printEli+0x6a>
  } else if (base == 10) {
    18ae:	2a 30       	cpi	r18, 0x0A	; 10
    18b0:	31 05       	cpc	r19, r1
    18b2:	d1 f4       	brne	.+52     	; 0x18e8 <_ZN5Print5printEli+0x66>
    if (n < 0) {
    18b4:	77 ff       	sbrs	r23, 7
    18b6:	17 c0       	rjmp	.+46     	; 0x18e6 <_ZN5Print5printEli+0x64>
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    18b8:	e8 81       	ld	r30, Y
    18ba:	f9 81       	ldd	r31, Y+1	; 0x01
    18bc:	01 90       	ld	r0, Z+
    18be:	f0 81       	ld	r31, Z
    18c0:	e0 2d       	mov	r30, r0
    18c2:	6d e2       	ldi	r22, 0x2D	; 45
    18c4:	09 95       	icall
    18c6:	8c 01       	movw	r16, r24
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    18c8:	44 27       	eor	r20, r20
    18ca:	55 27       	eor	r21, r21
    18cc:	ba 01       	movw	r22, r20
    18ce:	4c 19       	sub	r20, r12
    18d0:	5d 09       	sbc	r21, r13
    18d2:	6e 09       	sbc	r22, r14
    18d4:	7f 09       	sbc	r23, r15
    18d6:	ce 01       	movw	r24, r28
    18d8:	2a e0       	ldi	r18, 0x0A	; 10
    18da:	0e 94 bd 0b 	call	0x177a	; 0x177a <_ZN5Print11printNumberEmh>
    18de:	98 01       	movw	r18, r16
    18e0:	28 0f       	add	r18, r24
    18e2:	39 1f       	adc	r19, r25
    18e4:	04 c0       	rjmp	.+8      	; 0x18ee <_ZN5Print5printEli+0x6c>
    }
    return printNumber(n, 10);
    18e6:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
    18e8:	0e 94 bd 0b 	call	0x177a	; 0x177a <_ZN5Print11printNumberEmh>
    18ec:	9c 01       	movw	r18, r24
  }
}
    18ee:	c9 01       	movw	r24, r18
    18f0:	df 91       	pop	r29
    18f2:	cf 91       	pop	r28
    18f4:	1f 91       	pop	r17
    18f6:	0f 91       	pop	r16
    18f8:	ff 90       	pop	r15
    18fa:	ef 90       	pop	r14
    18fc:	df 90       	pop	r13
    18fe:	cf 90       	pop	r12
    1900:	08 95       	ret

00001902 <_ZN5Print5printEii>:
size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
    1902:	ef 92       	push	r14
    1904:	ff 92       	push	r15
    1906:	0f 93       	push	r16
    1908:	1f 93       	push	r17
    190a:	7b 01       	movw	r14, r22
    190c:	9a 01       	movw	r18, r20
{
  return print((long) n, base);
    190e:	00 27       	eor	r16, r16
    1910:	f7 fc       	sbrc	r15, 7
    1912:	00 95       	com	r16
    1914:	10 2f       	mov	r17, r16
    1916:	b8 01       	movw	r22, r16
    1918:	a7 01       	movw	r20, r14
    191a:	0e 94 41 0c 	call	0x1882	; 0x1882 <_ZN5Print5printEli>
}
    191e:	1f 91       	pop	r17
    1920:	0f 91       	pop	r16
    1922:	ff 90       	pop	r15
    1924:	ef 90       	pop	r14
    1926:	08 95       	ret

00001928 <_ZN5Print5printEPKc>:
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
    1928:	0e 94 a1 0b 	call	0x1742	; 0x1742 <_ZN5Print5writeEPKc>
}
    192c:	08 95       	ret

0000192e <__mulsi3>:
    192e:	62 9f       	mul	r22, r18
    1930:	d0 01       	movw	r26, r0
    1932:	73 9f       	mul	r23, r19
    1934:	f0 01       	movw	r30, r0
    1936:	82 9f       	mul	r24, r18
    1938:	e0 0d       	add	r30, r0
    193a:	f1 1d       	adc	r31, r1
    193c:	64 9f       	mul	r22, r20
    193e:	e0 0d       	add	r30, r0
    1940:	f1 1d       	adc	r31, r1
    1942:	92 9f       	mul	r25, r18
    1944:	f0 0d       	add	r31, r0
    1946:	83 9f       	mul	r24, r19
    1948:	f0 0d       	add	r31, r0
    194a:	74 9f       	mul	r23, r20
    194c:	f0 0d       	add	r31, r0
    194e:	65 9f       	mul	r22, r21
    1950:	f0 0d       	add	r31, r0
    1952:	99 27       	eor	r25, r25
    1954:	72 9f       	mul	r23, r18
    1956:	b0 0d       	add	r27, r0
    1958:	e1 1d       	adc	r30, r1
    195a:	f9 1f       	adc	r31, r25
    195c:	63 9f       	mul	r22, r19
    195e:	b0 0d       	add	r27, r0
    1960:	e1 1d       	adc	r30, r1
    1962:	f9 1f       	adc	r31, r25
    1964:	bd 01       	movw	r22, r26
    1966:	cf 01       	movw	r24, r30
    1968:	11 24       	eor	r1, r1
    196a:	08 95       	ret

0000196c <__udivmodqi4>:
    196c:	99 1b       	sub	r25, r25
    196e:	79 e0       	ldi	r23, 0x09	; 9
    1970:	04 c0       	rjmp	.+8      	; 0x197a <__udivmodqi4_ep>

00001972 <__udivmodqi4_loop>:
    1972:	99 1f       	adc	r25, r25
    1974:	96 17       	cp	r25, r22
    1976:	08 f0       	brcs	.+2      	; 0x197a <__udivmodqi4_ep>
    1978:	96 1b       	sub	r25, r22

0000197a <__udivmodqi4_ep>:
    197a:	88 1f       	adc	r24, r24
    197c:	7a 95       	dec	r23
    197e:	c9 f7       	brne	.-14     	; 0x1972 <__udivmodqi4_loop>
    1980:	80 95       	com	r24
    1982:	08 95       	ret

00001984 <__udivmodhi4>:
    1984:	aa 1b       	sub	r26, r26
    1986:	bb 1b       	sub	r27, r27
    1988:	51 e1       	ldi	r21, 0x11	; 17
    198a:	07 c0       	rjmp	.+14     	; 0x199a <__udivmodhi4_ep>

0000198c <__udivmodhi4_loop>:
    198c:	aa 1f       	adc	r26, r26
    198e:	bb 1f       	adc	r27, r27
    1990:	a6 17       	cp	r26, r22
    1992:	b7 07       	cpc	r27, r23
    1994:	10 f0       	brcs	.+4      	; 0x199a <__udivmodhi4_ep>
    1996:	a6 1b       	sub	r26, r22
    1998:	b7 0b       	sbc	r27, r23

0000199a <__udivmodhi4_ep>:
    199a:	88 1f       	adc	r24, r24
    199c:	99 1f       	adc	r25, r25
    199e:	5a 95       	dec	r21
    19a0:	a9 f7       	brne	.-22     	; 0x198c <__udivmodhi4_loop>
    19a2:	80 95       	com	r24
    19a4:	90 95       	com	r25
    19a6:	bc 01       	movw	r22, r24
    19a8:	cd 01       	movw	r24, r26
    19aa:	08 95       	ret

000019ac <__udivmodsi4>:
    19ac:	a1 e2       	ldi	r26, 0x21	; 33
    19ae:	1a 2e       	mov	r1, r26
    19b0:	aa 1b       	sub	r26, r26
    19b2:	bb 1b       	sub	r27, r27
    19b4:	fd 01       	movw	r30, r26
    19b6:	0d c0       	rjmp	.+26     	; 0x19d2 <__udivmodsi4_ep>

000019b8 <__udivmodsi4_loop>:
    19b8:	aa 1f       	adc	r26, r26
    19ba:	bb 1f       	adc	r27, r27
    19bc:	ee 1f       	adc	r30, r30
    19be:	ff 1f       	adc	r31, r31
    19c0:	a2 17       	cp	r26, r18
    19c2:	b3 07       	cpc	r27, r19
    19c4:	e4 07       	cpc	r30, r20
    19c6:	f5 07       	cpc	r31, r21
    19c8:	20 f0       	brcs	.+8      	; 0x19d2 <__udivmodsi4_ep>
    19ca:	a2 1b       	sub	r26, r18
    19cc:	b3 0b       	sbc	r27, r19
    19ce:	e4 0b       	sbc	r30, r20
    19d0:	f5 0b       	sbc	r31, r21

000019d2 <__udivmodsi4_ep>:
    19d2:	66 1f       	adc	r22, r22
    19d4:	77 1f       	adc	r23, r23
    19d6:	88 1f       	adc	r24, r24
    19d8:	99 1f       	adc	r25, r25
    19da:	1a 94       	dec	r1
    19dc:	69 f7       	brne	.-38     	; 0x19b8 <__udivmodsi4_loop>
    19de:	60 95       	com	r22
    19e0:	70 95       	com	r23
    19e2:	80 95       	com	r24
    19e4:	90 95       	com	r25
    19e6:	9b 01       	movw	r18, r22
    19e8:	ac 01       	movw	r20, r24
    19ea:	bd 01       	movw	r22, r26
    19ec:	cf 01       	movw	r24, r30
    19ee:	08 95       	ret

000019f0 <__tablejump2__>:
    19f0:	ee 0f       	add	r30, r30
    19f2:	ff 1f       	adc	r31, r31

000019f4 <__tablejump__>:
    19f4:	05 90       	lpm	r0, Z+
    19f6:	f4 91       	lpm	r31, Z+
    19f8:	e0 2d       	mov	r30, r0
    19fa:	09 94       	ijmp

000019fc <_exit>:
    19fc:	f8 94       	cli

000019fe <__stop_program>:
    19fe:	ff cf       	rjmp	.-2      	; 0x19fe <__stop_program>
